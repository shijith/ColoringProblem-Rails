

Started GET "/home" for 127.0.0.1 at Thu Sep 23 20:38:16 +0530 2010

ActionController::RoutingError (No route matches "/home"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 20:39:08 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 20:43:25 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 20:43:27 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"post"=>{"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"96", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"225", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}}
Completed   in 0ms

ActionController::InvalidAuthenticityToken (ActionController::InvalidAuthenticityToken):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (67.6ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (72.9ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 20:45:35 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 20:45:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"post"=>{"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"130", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"28", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}}
Completed   in 0ms

ActionController::InvalidAuthenticityToken (ActionController::InvalidAuthenticityToken):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.4ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (68.7ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (74.6ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 20:45:51 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 20:45:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"post"=>{"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"193", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"212", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 20:45:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"post"=>{"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"193", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"212", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 21:48:58 +0530 2010

SyntaxError (/home/guest/box/rail/graph/app/controllers/home_controller.rb:9: syntax error, unexpected tINTEGER, expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END
	params[ :0]
	          ^
/home/guest/box/rail/graph/app/controllers/home_controller.rb:10: syntax error, unexpected tINTEGER, expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END
	params[ :1]
	          ^
/home/guest/box/rail/graph/app/controllers/home_controller.rb:11: syntax error, unexpected tINTEGER, expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END
	params[ :2]
	          ^):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.6ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (11.7ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (18.2ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 21:49:20 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (10.3ms)
Completed 200 OK in 29ms (Views: 28.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 21:49:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"post"=>{"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"149", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"117", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 21:51:03 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 21:51:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"post"=>{"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"149", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"117", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 21:52:50 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 21:52:54 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"306", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"261", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 22:49:13 +0530 2010
  Processing by HomeController#index as HTML
Completed   in 1ms

NameError (undefined local variable or method `adj_arg' for #<HomeController:0xb5e33c84>):
  app/controllers/home_controller.rb:45:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (5.0ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (9.8ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 22:53:40 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (16.0ms)
Completed   in 20ms

ActionView::Template::Error (You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.each):
    27: }
    28: var i = 0;
    29: var nodes = [];
    30: <% for a,b in @cord %>
    31: a = <%= b[1] %>;
    32: document.writeln("<% b[1] %>"); 
    33: <% end %>
  app/views/home/index.html.erb:30:in `_app_views_home_index_html_erb___345767387__621994068_0'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (5.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (10.7ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 22:54:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (1.0ms)
Completed   in 6ms

ActionView::Template::Error (You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.each):
    28: var i = 0;
    29: var nodes = [];
    30: 
    31: <% for n, co in @node %>
    32: 	   nodes[<%= n %>] = new node(<%= n %>, <%= co[0] %>, <%= co[1] %>, [], 0);
    33: <% end %>
    34: 
  app/views/home/index.html.erb:31:in `_app_views_home_index_html_erb___345767387__622306238_0'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (5.5ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (11.3ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 22:55:53 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (1.0ms)
Completed   in 6ms

ActionView::Template::Error (You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.each):
    36: 		nodes[<%= n %>].adj = <%= neigh %>;
    37: <% end %>
    38: 
    39: <% for col, n in @colored %>
    40: <% if n %>
    41: 	<% for i in n %>
    42: 		nodes[<%= i %>].color = <%= col %>;
  app/views/home/index.html.erb:39:in `_app_views_home_index_html_erb___345767387__621536378_0'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (5.0ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (10.2ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:10:23 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (1.1ms)
Completed   in 6ms

ActionView::Template::Error (You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.each):
    38: 	<% end %>
    39: <% end %>
    40: 
    41: <% for col, n in @colored %>
    42: <% if n %>
    43: 	<% for i in n %>
    44: 		nodes[<%= i %>].color = <%= col %>;
  app/views/home/index.html.erb:41:in `_app_views_home_index_html_erb___345767387__621840398_0'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (5.1ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (10.3ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:11:40 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:11:42 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"192", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"260", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:13:14 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (6.0ms)
Completed   in 11ms

ActionView::Template::Error (undefined local variable or method `neigh' for #<#<Class:0xb5e67354>:0xb5e66508>):
    33: <% end %>
    34: <% end %>
    35: 	
    36: <% if neigh%>
    37: <% for n, neigh in @adj %>
    38: 		nodes[<%= n %>].adj = <%= neigh %>;
    39: <% end %>
  app/views/home/index.html.erb:36:in `_app_views_home_index_html_erb___345767387__621597758_0'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (5.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (10.8ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:13:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:13:32 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"186", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"148", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 49ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:13:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"186", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"107", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:13:37 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:13:38 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"186", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"107", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:13:41 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:13:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"186", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"107", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:13:44 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:13:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"186", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"107", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:24:33 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:24:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"186", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"107", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:25:29 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:25:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"186", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"253", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:26:08 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:26:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"17", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"19", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:28:32 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"17", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"19", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:28:34 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:28:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"8", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"9", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:29:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:30:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"23", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"21", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:30:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:30:32 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"23", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"21", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:36:09 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:36:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"89", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"131", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:36:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"89", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"131", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:36:17 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"89", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"277", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:36:42 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:37:01 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 46ms (Views: 9.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:06 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:06 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:37:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:38:01 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"155", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:38:36 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:38:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:38:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:38:46 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:38:47 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:38:47 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:39:02 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:39:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:39:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:39:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:39:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:39:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 47ms (Views: 9.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:39:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:40:23 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:25 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:28 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:29 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:29 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:40:43 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:44 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:44 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:40:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (4.6ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:41:48 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:41:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:42:25 +0530 2010

SyntaxError (/home/guest/box/rail/graph/app/controllers/home_controller.rb:75: syntax error, unexpected $end, expecting kEND):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (2.1ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (7.2ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:42:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:42:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:43:01 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:43:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:43:05 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:43:06 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:43:27 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:43:27 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:43:28 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:43:28 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:43:29 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:43:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:43:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:43:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:43:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:43:55 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:43:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"200", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:44:02 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Thu Sep 23 23:44:18 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 7ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:23 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:25 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:27 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:28 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:28 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:29 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:29 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:32 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:32 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Thu Sep 23 23:44:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:03:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:03:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:03:28 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"271", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:05:38 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"248", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"115", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"248", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"115", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"248", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"115", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"248", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"115", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"248", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"115", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:47 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"359", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"89", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:48 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"222", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"145", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"237", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"155", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"261", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"224", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"187", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"214", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:50 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"328", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"101", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:50 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"240", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"205", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:51 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"351", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"177", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:51 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"414", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"122", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:52 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"432", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"122", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:52 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"199", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"341", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"193", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"341", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:54 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"193", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"301", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:54 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"221", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"239", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"344", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"231", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"309", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"320", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"183", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"258", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"213", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"172", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"305", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"153", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"257", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"263", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"238", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"342", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"330", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"268", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"316", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"193", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"364", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"140", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"393", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"264", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:05:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"348", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"307", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"289", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"277", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"254", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"212", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"174", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"180", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:01 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"158", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"262", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:01 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"257", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"187", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"388", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"155", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"249", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"257", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"469", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"100", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"346", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"259", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"391", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"77", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"362", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"200", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"362", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"44", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"336", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"149", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:06 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"297", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"169", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:06 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"223", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"172", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:06 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"179", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"178", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:07 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"279", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"241", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:07 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"348", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"127", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"388", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"78", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"435", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"62", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"457", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"100", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:09 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"438", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"160", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:09 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"428", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"186", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:09 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"258", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"320", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"225", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"330", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"136", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"295", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"197", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"167", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"255", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"168", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"326", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"266", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:16 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"393", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"258", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:17 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"398", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"182", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:17 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"258", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"94", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"195", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"128", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"167", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"184", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"196", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"237", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"255", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"202", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"280", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"120", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"331", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"85", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"387", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"141", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"392", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"181", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"364", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"307", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"288", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"334", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"207", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"305", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:23 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"261", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"212", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:23 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"349", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"205", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"451", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"102", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"344", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"122", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:25 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"291", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"215", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:25 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"261", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"312", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:29 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"279", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"322", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:29 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"321", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"297", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 9ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"349", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"227", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"349", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"193", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"289", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"147", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (47.0ms)
Completed 200 OK in 51ms (Views: 51.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"226", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"153", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"289", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"32", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"329", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"74", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:32 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"261", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"182", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:32 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"226", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"253", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"259", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"279", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"355", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"182", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"325", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"125", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"382", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"30", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:35 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"391", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"160", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:35 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"302", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"178", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"364", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"136", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"269", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"68", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"225", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"111", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"229", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"202", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"327", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"187", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:38 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"406", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"101", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:38 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"438", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"125", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"383", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"224", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"315", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"213", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"240", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"217", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"201", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"287", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"454", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"119", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"414", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"71", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"384", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"53", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:42 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"367", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"240", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:06:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:06:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"394", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"245", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:07:05 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:07:06 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"382", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"236", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:07:07 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"376", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"223", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:07:07 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"421", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"137", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:07:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"416", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"301", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:07:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"427", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"314", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:07:09 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"348", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"168", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 9ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:07:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"323", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"120", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:07:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"316", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"110", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:14:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"102", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"216", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:14:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"127", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"215", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:15:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"114", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"262", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:18:56 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:18:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"465", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"107", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:20:16 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:20:17 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"114", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"114", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:22:18 +0530 2010

SyntaxError (/home/guest/box/rail/graph/app/controllers/home_controller.rb:68: syntax error, unexpected '=', expecting kEND):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (2.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (7.6ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:22:29 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"280", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"382", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"280", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"265", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"384", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"275", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"203", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"233", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"274", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"43", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"337", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"53", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"203", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"246", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:35 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"320", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"318", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"81", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"278", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"270", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"83", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"310", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"210", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"238", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"303", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:38 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"275", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"96", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:38 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"256", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"182", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"348", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"220", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"317", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"228", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"298", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"233", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"280", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"82", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"385", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"34", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"365", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"64", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"303", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"122", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:42 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"207", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"109", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"190", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"149", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"335", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"89", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:44 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"390", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"84", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:44 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"425", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"265", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:44 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"362", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"327", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"265", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"322", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"218", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"251", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"147", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"152", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"92", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"206", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:47 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"211", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"139", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:48 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"233", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"100", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:48 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"293", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"59", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"334", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"163", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"334", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"187", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"327", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"218", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 9ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:52 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"153", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"186", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"60", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"113", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"47", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"110", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"57", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"192", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:54 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"80", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"218", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:54 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"154", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"173", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"262", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"79", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"286", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"73", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"328", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"86", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"343", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"167", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"335", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"185", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"259", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"239", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"193", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"197", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"137", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"167", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:22:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"12", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"156", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:23:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"214", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"219", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:23:01 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"211", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"192", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:23:38 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"7", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"12", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:23:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"58", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"85", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 51ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:23:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"264", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"106", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:23:42 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"205", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"250", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:23:44 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"242", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"13", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:23:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"261", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"364", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:23:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"370", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"222", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 7ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:23:48 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"225", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"100", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:23:50 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"329", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"323", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:23:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"286", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"238", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:24:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"230", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"215", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:24:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"324", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"199", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"257", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"126", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:38 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"337", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"120", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:38 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"318", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"182", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:38 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"219", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"269", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"219", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"292", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"465", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"193", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"369", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"181", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"290", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"198", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"301", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"275", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (45.4ms)
Completed 200 OK in 50ms (Views: 49.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"355", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"275", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:42 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"358", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"201", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:42 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"278", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"208", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"229", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"93", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"326", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"92", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"311", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"172", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:44 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"229", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"190", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:44 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"219", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"220", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"299", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"228", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"347", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"99", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"435", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"81", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"395", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"185", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"292", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"216", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:47 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"269", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"244", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"366", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"203", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:50 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"423", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"189", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:51 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"199", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"392", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:51 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"266", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"106", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:52 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"357", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"193", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"105", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"286", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:54 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"212", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"144", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"198", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"267", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"406", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"75", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"416", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"141", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"297", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"180", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:26:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"269", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"17", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:28:30 +0530 2010
  Processing by HomeController#index as HTML
Completed   in 0ms

NoMethodError (You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.each):
  app/controllers/home_controller.rb:40:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (4.9ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (9.7ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:29:02 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:29:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"113", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"161", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:29:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"262", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"310", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:29:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"255", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"272", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:29:06 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"292", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"262", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:29:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"289", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"134", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:29:57 +0530 2010
  Processing by HomeController#index as HTML
Completed   in 0ms

NoMethodError (You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.each):
  app/controllers/home_controller.rb:39:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (5.0ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (9.8ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:30:02 +0530 2010
  Processing by HomeController#index as HTML
Completed   in 0ms

NoMethodError (You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.each):
  app/controllers/home_controller.rb:39:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (4.8ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (9.6ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:30:03 +0530 2010
  Processing by HomeController#index as HTML
Completed   in 0ms

NoMethodError (You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.each):
  app/controllers/home_controller.rb:39:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (4.7ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (9.4ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:30:04 +0530 2010
  Processing by HomeController#index as HTML
Completed   in 0ms

NoMethodError (You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.each):
  app/controllers/home_controller.rb:39:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (5.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (51.4ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:30:05 +0530 2010
  Processing by HomeController#index as HTML
Completed   in 1ms

NoMethodError (You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.each):
  app/controllers/home_controller.rb:39:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (5.0ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (9.8ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 00:30:21 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:30:23 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"323", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"120", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:55:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"110", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"99", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 00:55:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"create", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"327", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"298", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 08:55:09 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 25ms (Views: 24.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 09:00:27 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 09:02:22 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 09:49:21 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (10.1ms)
Completed 200 OK in 41ms (Views: 39.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:01:08 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:07:01 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:09:46 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:13:52 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:14:25 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:14:49 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:15:46 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:16:28 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:17:26 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:31:55 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:32:51 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:44:40 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:46:25 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:47:29 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:50:36 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:51:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 46ms (Views: 45.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:52:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:52:48 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:56:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:57:20 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 10:59:27 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:01:38 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:02:13 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:02:28 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:03:54 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:04:16 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:04:25 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:04:47 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:04:53 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:05:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:08:08 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:08:43 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:09:51 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:10:02 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:10:14 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:10:19 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:17:32 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:18:30 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:18:45 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:19:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:20:06 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:20:35 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:20:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:21:13 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:22:14 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:23:02 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:23:13 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:23:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.5ms)
Completed 200 OK in 8ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:24:08 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:25:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (41.3ms)
Completed 200 OK in 46ms (Views: 45.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:27:01 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:27:24 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:27:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:27:56 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:28:27 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:29:29 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:29:44 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:30:19 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:30:35 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:31:01 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:31:19 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:31:34 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:31:43 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:32:41 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:33:17 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:33:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:33:52 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:34:08 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:34:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:35:33 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:36:11 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:36:30 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.5ms)
Completed 200 OK in 47ms (Views: 46.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:37:06 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:41:41 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:41:52 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:42:51 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:45:29 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:47:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:50:00 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:50:21 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:51:19 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 11:51:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 14:24:27 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (11.2ms)
Completed 200 OK in 42ms (Views: 40.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 14:26:07 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 27.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 14:27:44 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 14:37:28 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 28ms (Views: 26.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 14:46:52 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.9ms)
Completed 200 OK in 30ms (Views: 27.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 14:47:25 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 28ms (Views: 26.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 14:47:36 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.9ms)
Completed 200 OK in 29ms (Views: 27.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:02:00 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.7ms)
Completed 200 OK in 29ms (Views: 27.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:02:14 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 27.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:03:25 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:04:10 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.7ms)
Completed 200 OK in 29ms (Views: 27.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:05:08 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.9ms)
Completed 200 OK in 29ms (Views: 27.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:05:15 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.6ms)
Completed 200 OK in 30ms (Views: 27.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:06:01 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.8ms)
Completed 200 OK in 30ms (Views: 28.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:06:14 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 27.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:08:33 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.6ms)
Completed 200 OK in 29ms (Views: 27.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:15:22 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (10.9ms)
Completed 200 OK in 32ms (Views: 30.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:15:53 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.7ms)
Completed 200 OK in 29ms (Views: 27.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:16:32 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 28ms (Views: 26.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:17:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.7ms)
Completed 200 OK in 29ms (Views: 27.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:18:48 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.6ms)
Completed 200 OK in 29ms (Views: 27.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:20:50 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.7ms)
Completed 200 OK in 30ms (Views: 27.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:20:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"name"=>"hai"}
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 29ms (Views: 27.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:23:42 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"name"=>"hai"}
Rendered home/index.html.erb within layouts/application (11.8ms)
Completed 200 OK in 34ms (Views: 31.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:24:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"name"=>"function node(id, x, y, adj, color) {     this.id = id;     this.x = x;     this.y = y;     this.adj = adj;     this.color = color; }"}
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 30ms (Views: 27.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:31:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"name"=>"function node(id, x, y, adj, color) {     this.id = id;     this.x = x;     this.y = y;     this.adj = adj;     this.color = color; }"}
Rendered home/index.html.erb within layouts/application (12.6ms)
Completed 200 OK in 32ms (Views: 30.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:32:16 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.7ms)
Completed 200 OK in 29ms (Views: 27.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:32:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "0"=>"[object Object]", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "1"=>"[object Object]", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "2"=>"[object Object]", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "3"=>"[object Object]", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "4"=>"[object Object]", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (10.9ms)
Completed 200 OK in 31ms (Views: 28.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:36:27 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"function inspect() {     return \"[\" + this.map(Object.inspect).join(\", \") + \"]\"; }", "size"=>"function size() {     return this.length; }", "zip"=>"function zip() {     var iterator = Prototype.K, args = $A(arguments);     if (Object.isFunction(args.last())) {         iterator = args.pop();     }     var collections = [this].concat(args).map($A);     return this.map(function (value, index) {return iterator(collections.pluck(index));}); }", "toArray"=>"function clone() {     return slice.call(this, 0); }", "sortBy"=>"function sortBy(iterator, context) {     return this.map(function (value, index) {return {value: value, criteria: iterator.call(context, value, index)};}).sort(function (left, right) {var a = left.criteria, b = right.criteria;return a < b ? -1 : a > b ? 1 : 0;}).pluck(\"value\"); }", "partition"=>"function partition(iterator, context) {     iterator = iterator || Prototype.K;     var trues = [], falses = [];     this.each(function (value, index) {(iterator.call(context, value, index) ? trues : falses).push(value);});     return [trues, falses]; }", "findAll"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "any"=>"function any(iterator, context) {     iterator = iterator || Prototype.K;     var result = false;     this.each(function (value, index) {if ((result = !!iterator.call(context, value, index))) {throw $break;}});     return result; }", "all"=>"function all(iterator, context) {     iterator = iterator || Prototype.K;     var result = true;     this.each(function (value, index) {result = result && !!iterator.call(context, value, index);if (!result) {throw $break;}});     return result; }", "intersect"=>"function intersect(array) {     return this.uniq().findAll(function (item) {return array.detect(function (value) {return item === value;});}); }", "clear"=>"function clear() {     this.length = 0;     return this; }", "_each"=>"function forEach() {     [native code] }", "uniq"=>"function uniq(sorted) {     return this.inject([], function (array, value, index) {if (0 == index || (sorted ? array.last() != value : !array.include(value))) {array.push(value);}return array;}); }", "pluck"=>"function pluck(property) {     var results = [];     this.each(function (value) {results.push(value[property]);});     return results; }", "collect"=>"function collect(iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     this.each(function (value, index) {results.push(iterator.call(context, value, index));});     return results; }", "each"=>"function each(iterator, context) {     var index = 0;     try {         this._each(function (value) {iterator.call(context, value, index++);});     } catch (e) {         if (e != $break) {             throw e;         }     }     return this; }", "last"=>"function last() {     return this[this.length - 1]; }", "max"=>"function max(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value >= result) {result = value;}});     return result; }", "member"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "grep"=>"function grep(filter, iterator, context) {     iterator = iterator || Prototype.K;     var results = [];     if (Object.isString(filter)) {         filter = new RegExp(RegExp.escape(filter));     }     this.each(function (value, index) {if (filter.match(value)) {results.push(iterator.call(context, value, index));}});     return results; }", "_reverse"=>"function reverse() {     [native code] }", "find"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "detect"=>"function detect(iterator, context) {     var result;     this.each(function (value, index) {if (iterator.call(context, value, index)) {result = value;throw $break;}});     return result; }", "flatten"=>"function flatten() {     return this.inject([], function (array, value) {if (Object.isArray(value)) {return array.concat(value.flatten());}array.push(value);return array;}); }", "invoke"=>"function invoke(method) {     var args = $A(arguments).slice(1);     return this.map(function (value) {return value[method].apply(value, args);}); }", "include"=>"function include(object) {     if (Object.isFunction(this.indexOf)) {         if (this.indexOf(object) != -1) {             return true;         }     }     var found = false;     this.each(function (value) {if (value == object) {found = true;throw $break;}});     return found; }", "clone"=>"function clone() {     return slice.call(this, 0); }", "compact"=>"function compact() {     return this.select(function (value) {return value != null;}); }", "first"=>"function first() {     return this[0]; }", "entries"=>"function toArray() {     return this.map(); }", "min"=>"function min(iterator, context) {     iterator = iterator || Prototype.K;     var result;     this.each(function (value, index) {value = iterator.call(context, value, index);if (result == null || value < result) {result = value;}});     return result; }", "inGroupsOf"=>"function inGroupsOf(number, fillWith) {     fillWith = Object.isUndefined(fillWith) ? null : fillWith;     return this.eachSlice(number, function (slice) {while (slice.length < number) {slice.push(fillWith);}return slice;}); }", "inject"=>"function inject(memo, iterator, context) {     this.each(function (value, index) {memo = iterator.call(context, memo, value, index);});     return memo; }", "select"=>"function findAll(iterator, context) {     var results = [];     this.each(function (value, index) {if (iterator.call(context, value, index)) {results.push(value);}});     return results; }", "reject"=>"function reject(iterator, context) {     var results = [];     this.each(function (value, index) {if (!iterator.call(context, value, index)) {results.push(value);}});     return results; }", "without"=>"function without() {     var values = slice.call(arguments, 0);     return this.select(function (value) {return !values.include(value);}); }", "eachSlice"=>"function eachSlice(number, iterator, context) {     var index = - number, slices = [], array = this.toArray();     if (number < 1) {         return array;     }     while ((index += number) < array.length) {         slices.push(array.slice(index, index + number));     }     return slices.collect(iterator, context); }"}
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:37:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"name"=>"shijith"}
Rendered home/index.html.erb within layouts/application (9.8ms)
Completed 200 OK in 29ms (Views: 27.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:49:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"name"=>"shijith"}
Rendered home/index.html.erb within layouts/application (9.6ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:50:30 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.7ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:50:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"name"=>"1"}
Rendered home/index.html.erb within layouts/application (11.7ms)
Completed 200 OK in 31ms (Views: 28.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:51:44 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.7ms)
Completed 200 OK in 29ms (Views: 27.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:51:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"name"=>"1"}
Rendered home/index.html.erb within layouts/application (9.6ms)
Completed 200 OK in 30ms (Views: 28.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 15:59:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"name"=>"1"}
Rendered home/index.html.erb within layouts/application (9.6ms)
Completed 200 OK in 29ms (Views: 27.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 15:59:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.7ms)
Completed 200 OK in 29ms (Views: 27.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:00:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"name"=>"2,1"}
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 30ms (Views: 27.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:05:21 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 26.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:05:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"1"=>""}
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 28ms (Views: 26.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:07:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"1"=>""}
Rendered home/index.html.erb within layouts/application (9.8ms)
Completed 200 OK in 30ms (Views: 28.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:07:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"1"=>""}
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 29ms (Views: 27.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:08:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"1"=>"1,2"}
Rendered home/index.html.erb within layouts/application (10.1ms)
Completed 200 OK in 29ms (Views: 27.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:24:07 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"1"=>""}
Completed   in 2ms

TypeError (can't convert Fixnum into String):
  app/controllers/home_controller.rb:11:in `+'
  app/controllers/home_controller.rb:11:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (5.5ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (25.6ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (48.8ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:27:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 29ms (Views: 26.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:28:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"1"=>""}
Rendered home/index.html.erb within layouts/application (9.2ms)
Completed 200 OK in 28ms (Views: 26.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:28:25 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"1"=>"1,2"}
Rendered home/index.html.erb within layouts/application (9.7ms)
Completed 200 OK in 164ms (Views: 161.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:31:14 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 26.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:31:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"1"=>"2,1"}
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 27.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:32:13 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"1"=>"1,2"}
Rendered home/index.html.erb within layouts/application (10.3ms)
Completed 200 OK in 30ms (Views: 28.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:32:47 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"1"=>"1,2"}
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 28ms (Views: 26.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:33:52 +0530 2010
  Processing by HomeController#index as HTML
Completed   in 4ms

NameError (undefined local variable or method `k' for #<HomeController:0xb5f34b60>):
  app/controllers/home_controller.rb:10:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (5.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (22.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (43.1ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:34:10 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.2ms)
Completed 200 OK in 28ms (Views: 26.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:34:17 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"1"=>"1,2"}
Rendered home/index.html.erb within layouts/application (9.6ms)
Completed 200 OK in 29ms (Views: 27.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:35:13 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 28ms (Views: 26.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:35:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"1"=>"1,2,3"}
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 28ms (Views: 26.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:36:38 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.8ms)
Completed 200 OK in 29ms (Views: 27.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:36:47 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"undefined", "size"=>"undefined", "zip"=>"undefined", "toArray"=>"undefined", "sortBy"=>"undefined", "partition"=>"undefined", "findAll"=>"undefined", "any"=>"undefined", "all"=>"undefined", "intersect"=>"undefined", "clear"=>"undefined", "_each"=>"undefined", "uniq"=>"undefined", "pluck"=>"undefined", "collect"=>"undefined", "each"=>"undefined", "last"=>"undefined", "max"=>"undefined", "member"=>"undefined", "grep"=>"undefined", "_reverse"=>"undefined", "find"=>"undefined", "detect"=>"undefined", "0"=>"1,2", "flatten"=>"undefined", "invoke"=>"undefined", "include"=>"undefined", "1"=>"2", "clone"=>"undefined", "compact"=>"undefined", "first"=>"undefined", "entries"=>"undefined", "min"=>"undefined", "inGroupsOf"=>"undefined", "2"=>"", "inject"=>"undefined", "select"=>"undefined", "reject"=>"undefined", "without"=>"undefined", "eachSlice"=>"undefined"}
Completed   in 6425ms


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:37:56 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (10.0ms)
Completed 200 OK in 29ms (Views: 27.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:39:08 +0530 2010

SyntaxError (/home/guest/box/rail/graph/app/controllers/home_controller.rb:11: syntax error, unexpected kIN, expecting kDO_COND or ':' or '\n' or ';'
	while k in 0..2
	          ^
/home/guest/box/rail/graph/app/controllers/home_controller.rb:76: syntax error, unexpected kEND, expecting $end):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (5.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (9.4ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (31.4ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:39:19 +0530 2010

SyntaxError (/home/guest/box/rail/graph/app/controllers/home_controller.rb:11: syntax error, unexpected kIN, expecting kDO_COND or ':' or '\n' or ';'
	while k in 0..2 do
	          ^
/home/guest/box/rail/graph/app/controllers/home_controller.rb:11: syntax error, unexpected kDO_COND, expecting kEND
/home/guest/box/rail/graph/app/controllers/home_controller.rb:76: syntax error, unexpected kEND, expecting $end):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (5.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (9.1ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (30.7ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:40:08 +0530 2010

SyntaxError (/home/guest/box/rail/graph/app/controllers/home_controller.rb:13: syntax error, unexpected ')'
		res = params[String(k++)]
		                        ^):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (5.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (9.0ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (30.3ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:40:24 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 28ms (Views: 26.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:40:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 27.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:40:59 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.8ms)
Completed 200 OK in 30ms (Views: 27.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:41:00 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:41:29 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 28ms (Views: 26.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:41:47 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.8ms)
Completed 200 OK in 30ms (Views: 27.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:41:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"undefined", "size"=>"undefined", "zip"=>"undefined", "toArray"=>"undefined", "sortBy"=>"undefined", "partition"=>"undefined", "findAll"=>"undefined", "any"=>"undefined", "all"=>"undefined", "intersect"=>"undefined", "clear"=>"undefined", "_each"=>"undefined", "uniq"=>"undefined", "pluck"=>"undefined", "collect"=>"undefined", "each"=>"undefined", "last"=>"undefined", "max"=>"undefined", "member"=>"undefined", "grep"=>"undefined", "_reverse"=>"undefined", "find"=>"undefined", "detect"=>"undefined", "0"=>"1,2", "flatten"=>"undefined", "invoke"=>"undefined", "include"=>"undefined", "1"=>"2", "clone"=>"undefined", "compact"=>"undefined", "first"=>"undefined", "entries"=>"undefined", "min"=>"undefined", "inGroupsOf"=>"undefined", "2"=>"", "inject"=>"undefined", "select"=>"undefined", "3"=>"", "reject"=>"undefined", "without"=>"undefined", "eachSlice"=>"undefined"}
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 27.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:42:54 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 28ms (Views: 26.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:43:07 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"undefined", "size"=>"undefined", "zip"=>"undefined", "toArray"=>"undefined", "sortBy"=>"undefined", "partition"=>"undefined", "findAll"=>"undefined", "any"=>"undefined", "all"=>"undefined", "intersect"=>"undefined", "clear"=>"undefined", "_each"=>"undefined", "uniq"=>"undefined", "pluck"=>"undefined", "collect"=>"undefined", "each"=>"undefined", "last"=>"undefined", "max"=>"undefined", "member"=>"undefined", "grep"=>"undefined", "_reverse"=>"undefined", "find"=>"undefined", "detect"=>"undefined", "0"=>"1,2", "flatten"=>"undefined", "invoke"=>"undefined", "include"=>"undefined", "1"=>"2", "clone"=>"undefined", "compact"=>"undefined", "first"=>"undefined", "entries"=>"undefined", "min"=>"undefined", "inGroupsOf"=>"undefined", "2"=>"", "inject"=>"undefined", "select"=>"undefined", "reject"=>"undefined", "without"=>"undefined", "eachSlice"=>"undefined"}
Rendered home/index.html.erb within layouts/application (10.0ms)
Completed 200 OK in 30ms (Views: 28.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:44:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 32ms (Views: 30.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:45:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"undefined", "size"=>"undefined", "zip"=>"undefined", "toArray"=>"undefined", "sortBy"=>"undefined", "partition"=>"undefined", "findAll"=>"undefined", "any"=>"undefined", "all"=>"undefined", "intersect"=>"undefined", "clear"=>"undefined", "_each"=>"undefined", "uniq"=>"undefined", "pluck"=>"undefined", "collect"=>"undefined", "each"=>"undefined", "last"=>"undefined", "max"=>"undefined", "member"=>"undefined", "grep"=>"undefined", "_reverse"=>"undefined", "find"=>"undefined", "detect"=>"undefined", "0"=>"2,1", "flatten"=>"undefined", "invoke"=>"undefined", "include"=>"undefined", "1"=>"2,0", "clone"=>"undefined", "compact"=>"undefined", "first"=>"undefined", "entries"=>"undefined", "min"=>"undefined", "inGroupsOf"=>"undefined", "2"=>"0,1", "inject"=>"undefined", "select"=>"undefined", "reject"=>"undefined", "without"=>"undefined", "eachSlice"=>"undefined"}
Rendered home/index.html.erb within layouts/application (9.6ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:45:42 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"undefined", "size"=>"undefined", "zip"=>"undefined", "toArray"=>"undefined", "sortBy"=>"undefined", "partition"=>"undefined", "findAll"=>"undefined", "any"=>"undefined", "all"=>"undefined", "intersect"=>"undefined", "clear"=>"undefined", "_each"=>"undefined", "uniq"=>"undefined", "pluck"=>"undefined", "collect"=>"undefined", "each"=>"undefined", "last"=>"undefined", "max"=>"undefined", "member"=>"undefined", "grep"=>"undefined", "_reverse"=>"undefined", "find"=>"undefined", "detect"=>"undefined", "0"=>"", "flatten"=>"undefined", "invoke"=>"undefined", "include"=>"undefined", "1"=>"2", "clone"=>"undefined", "compact"=>"undefined", "first"=>"undefined", "entries"=>"undefined", "min"=>"undefined", "inGroupsOf"=>"undefined", "2"=>"1", "inject"=>"undefined", "select"=>"undefined", "reject"=>"undefined", "without"=>"undefined", "eachSlice"=>"undefined"}
Rendered home/index.html.erb within layouts/application (10.1ms)
Completed 200 OK in 34ms (Views: 31.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:51:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.8ms)
Completed 200 OK in 29ms (Views: 27.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:52:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"undefined", "size"=>"undefined", "zip"=>"undefined", "toArray"=>"undefined", "sortBy"=>"undefined", "partition"=>"undefined", "findAll"=>"undefined", "any"=>"undefined", "all"=>"undefined", "intersect"=>"undefined", "clear"=>"undefined", "_each"=>"undefined", "uniq"=>"undefined", "pluck"=>"undefined", "collect"=>"undefined", "each"=>"undefined", "last"=>"undefined", "max"=>"undefined", "member"=>"undefined", "grep"=>"undefined", "_reverse"=>"undefined", "find"=>"undefined", "detect"=>"undefined", "0"=>"1,2", "flatten"=>"undefined", "invoke"=>"undefined", "include"=>"undefined", "1"=>"0,2", "clone"=>"undefined", "compact"=>"undefined", "first"=>"undefined", "entries"=>"undefined", "min"=>"undefined", "inGroupsOf"=>"undefined", "2"=>"0,1", "inject"=>"undefined", "select"=>"undefined", "reject"=>"undefined", "without"=>"undefined", "eachSlice"=>"undefined"}
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 28ms (Views: 26.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 16:59:24 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (138.4ms)
Completed 200 OK in 157ms (Views: 155.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 16:59:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>"undefined", "size"=>"undefined", "zip"=>"undefined", "toArray"=>"undefined", "sortBy"=>"undefined", "partition"=>"undefined", "findAll"=>"undefined", "any"=>"undefined", "all"=>"undefined", "intersect"=>"undefined", "clear"=>"undefined", "_each"=>"undefined", "uniq"=>"undefined", "pluck"=>"undefined", "collect"=>"undefined", "each"=>"undefined", "last"=>"undefined", "max"=>"undefined", "member"=>"undefined", "grep"=>"undefined", "_reverse"=>"undefined", "find"=>"undefined", "detect"=>"undefined", "0"=>"1,2", "flatten"=>"undefined", "invoke"=>"undefined", "include"=>"undefined", "1"=>"2,0", "clone"=>"undefined", "compact"=>"undefined", "first"=>"undefined", "entries"=>"undefined", "min"=>"undefined", "inGroupsOf"=>"undefined", "2"=>"1,0", "inject"=>"undefined", "select"=>"undefined", "reject"=>"undefined", "without"=>"undefined", "eachSlice"=>"undefined"}
Rendered home/index.html.erb within layouts/application (9.7ms)
Completed 200 OK in 29ms (Views: 27.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:00:54 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.6ms)
Completed 200 OK in 28ms (Views: 26.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:01:36 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 29ms (Views: 27.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:01:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",", "size"=>",", "zip"=>",", "toArray"=>",", "sortBy"=>",", "partition"=>",", "findAll"=>",", "any"=>",", "all"=>",", "intersect"=>",", "clear"=>",", "_each"=>",", "uniq"=>",", "pluck"=>",", "collect"=>",", "each"=>",", "last"=>",", "max"=>",", "member"=>",", "grep"=>",", "_reverse"=>",", "find"=>",", "detect"=>",", "0"=>"2,1,197", "flatten"=>",", "invoke"=>",", "include"=>",", "1"=>"0,2,173", "clone"=>",", "compact"=>",", "first"=>",", "entries"=>",", "min"=>",", "inGroupsOf"=>",", "2"=>"0,1,286", "inject"=>",", "select"=>",", "reject"=>",", "without"=>",", "eachSlice"=>","}
Rendered home/index.html.erb within layouts/application (9.7ms)
Completed 200 OK in 29ms (Views: 27.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:02:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",", "size"=>",", "zip"=>",", "toArray"=>",", "sortBy"=>",", "partition"=>",", "findAll"=>",", "any"=>",", "all"=>",", "intersect"=>",", "clear"=>",", "_each"=>",", "uniq"=>",", "pluck"=>",", "collect"=>",", "each"=>",", "last"=>",", "max"=>",", "member"=>",", "grep"=>",", "_reverse"=>",", "find"=>",", "detect"=>",", "0"=>",38", "flatten"=>",", "invoke"=>",", "include"=>",", "1"=>",142", "clone"=>",", "compact"=>",", "first"=>",", "entries"=>",", "min"=>",", "inGroupsOf"=>",", "2"=>",241", "inject"=>",", "select"=>",", "reject"=>",", "without"=>",", "eachSlice"=>","}
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:03:07 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",", "size"=>",", "zip"=>",", "toArray"=>",", "sortBy"=>",", "partition"=>",", "findAll"=>",", "any"=>",", "all"=>",", "intersect"=>",", "clear"=>",", "_each"=>",", "uniq"=>",", "pluck"=>",", "collect"=>",", "each"=>",", "last"=>",", "max"=>",", "member"=>",", "grep"=>",", "_reverse"=>",", "find"=>",", "detect"=>",", "0"=>"2,1,170", "flatten"=>",", "invoke"=>",", "include"=>",", "1"=>"0,2,126", "clone"=>",", "compact"=>",", "first"=>",", "entries"=>",", "min"=>",", "inGroupsOf"=>",", "2"=>"0,1,232", "inject"=>",", "select"=>",", "reject"=>",", "without"=>",", "eachSlice"=>","}
Rendered home/index.html.erb within layouts/application (9.2ms)
Completed 200 OK in 28ms (Views: 26.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:04:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 26.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:04:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,159,53", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,153,158", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,249,165", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:05:12 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 28ms (Views: 26.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:05:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,157,61", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,109,116", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,203,124", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 30ms (Views: 27.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:06:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 26.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:06:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,217,43", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,177,157", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,281,168", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 31ms (Views: 28.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:07:17 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.8ms)
Completed 200 OK in 29ms (Views: 27.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:07:28 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,174,55", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,99,173", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,256,172", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (10.9ms)
Completed 200 OK in 31ms (Views: 29.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:09:13 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.8ms)
Completed 200 OK in 30ms (Views: 27.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:09:23 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,203,40", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,156,117", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,257,125", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 29ms (Views: 26.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:17:34 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 30ms (Views: 27.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:17:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,2,192,33", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",273,53", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,3,188,196", "inject"=>",,", "select"=>",,", "3"=>"0,2,284,57", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Completed   in 2ms

NoMethodError (undefined method `each' for 0:Fixnum):
  app/controllers/home_controller.rb:60:in `index'
  app/controllers/home_controller.rb:56:in `each'
  app/controllers/home_controller.rb:56:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (5.5ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (86.6ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (108.1ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:18:33 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.2ms)
Completed 200 OK in 28ms (Views: 26.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:18:35 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.6ms)
Completed 200 OK in 30ms (Views: 27.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:18:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",210,42", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Completed   in 2ms

NoMethodError (undefined method `each' for 0:Fixnum):
  app/controllers/home_controller.rb:60:in `index'
  app/controllers/home_controller.rb:56:in `each'
  app/controllers/home_controller.rb:56:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (5.4ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (81.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (102.8ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:19:50 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 28ms (Views: 26.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:19:52 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",346,157", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Completed   in 2ms

NoMethodError (undefined method `each' for 0:Fixnum):
  app/controllers/home_controller.rb:60:in `index'
  app/controllers/home_controller.rb:56:in `each'
  app/controllers/home_controller.rb:56:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (5.5ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (82.1ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (104.5ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:20:17 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 28ms (Views: 26.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:20:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",173,79", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (10.4ms)
Completed 200 OK in 30ms (Views: 27.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:20:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",322,71", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",297,99", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",340,142", "inject"=>",,", "select"=>",,", "3"=>",350,148", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.6ms)
Completed 200 OK in 30ms (Views: 27.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:20:43 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 27.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:20:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,303,95", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,340,94", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,342,127", "inject"=>",,", "select"=>",,", "3"=>",353,128", "reject"=>",,", "4"=>",345,139", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:21:15 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (144.5ms)
Completed 200 OK in 164ms (Views: 161.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:21:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,174,45", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,135,128", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,321,124", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 29ms (Views: 27.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:23:17 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:23:23 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,196,88", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",201,139", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,295,127", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.2ms)
Completed 200 OK in 29ms (Views: 27.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:23:56 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 29ms (Views: 27.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:24:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,195,86", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,182,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,231,169", "inject"=>",,", "select"=>",,", "3"=>",247,173", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:24:30 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.2ms)
Completed 200 OK in 28ms (Views: 26.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:24:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,232,69", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,198,138", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,256,138", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 29ms (Views: 26.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:24:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.5ms)
Completed 200 OK in 29ms (Views: 26.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:25:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,197,88", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,260,82", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,260,110", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.2ms)
Completed 200 OK in 28ms (Views: 26.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:25:48 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 29ms (Views: 27.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:26:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,254,83", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,236,150", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,318,157", "inject"=>",,", "select"=>",,", "3"=>",204,165", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 29ms (Views: 26.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:26:21 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 28ms (Views: 26.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:26:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,232,82", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,330,108", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,274,169", "inject"=>",,", "select"=>",,", "3"=>",278,183", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Completed   in 2ms

TypeError (String can't be coerced into Fixnum):
  app/controllers/home_controller.rb:20:in `+'
  app/controllers/home_controller.rb:20:in `index'
  app/controllers/home_controller.rb:19:in `each'
  app/controllers/home_controller.rb:19:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (5.8ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (85.1ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (107.1ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:26:42 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.3ms)
Completed 200 OK in 28ms (Views: 26.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:26:52 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,265,79", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,224,151", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,342,154", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.2ms)
Completed 200 OK in 29ms (Views: 26.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 17:27:13 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.6ms)
Completed 200 OK in 29ms (Views: 27.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 17:27:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,198,40", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,148,110", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,251,115", "inject"=>",,", "select"=>",,", "3"=>",153,120", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (9.4ms)
Completed 200 OK in 29ms (Views: 27.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 21:38:07 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (13.3ms)
Completed 200 OK in 39ms (Views: 38.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 21:38:29 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,124,104", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,201,76", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,240,126", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 21:45:18 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 21:45:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",:,,:,,:", "size"=>",:,,:,,:", "zip"=>",:,,:,,:", "toArray"=>",:,,:,,:", "sortBy"=>",:,,:,,:", "partition"=>",:,,:,,:", "findAll"=>",:,,:,,:", "any"=>",:,,:,,:", "all"=>",:,,:,,:", "intersect"=>",:,,:,,:", "clear"=>",:,,:,,:", "_each"=>",:,,:,,:", "uniq"=>",:,,:,,:", "pluck"=>",:,,:,,:", "collect"=>",:,,:,,:", "each"=>",:,,:,,:", "last"=>",:,,:,,:", "max"=>",:,,:,,:", "member"=>",:,,:,,:", "grep"=>",:,,:,,:", "_reverse"=>",:,,:,,:", "find"=>",:,,:,,:", "detect"=>",:,,:,,:", "0"=>"2,1,:,73,:,61,:", "flatten"=>",:,,:,,:", "invoke"=>",:,,:,,:", "include"=>",:,,:,,:", "1"=>"2,0,:,154,:,61,:", "clone"=>",:,,:,,:", "compact"=>",:,,:,,:", "first"=>",:,,:,,:", "entries"=>",:,,:,,:", "min"=>",:,,:,,:", "inGroupsOf"=>",:,,:,,:", "2"=>"0,1,:,120,:,118,:", "inject"=>",:,,:,,:", "select"=>",:,,:,,:", "3"=>",:,126,:,128,:", "reject"=>",:,,:,,:", "without"=>",:,,:,,:", "eachSlice"=>",:,,:,,:"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 21:48:26 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.6ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 21:48:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",:,,:,,:", "size"=>",:,,:,,:", "zip"=>",:,,:,,:", "toArray"=>",:,,:,,:", "sortBy"=>",:,,:,,:", "partition"=>",:,,:,,:", "findAll"=>",:,,:,,:", "any"=>",:,,:,,:", "all"=>",:,,:,,:", "intersect"=>",:,,:,,:", "clear"=>",:,,:,,:", "_each"=>",:,,:,,:", "uniq"=>",:,,:,,:", "pluck"=>",:,,:,,:", "collect"=>",:,,:,,:", "each"=>",:,,:,,:", "last"=>",:,,:,,:", "max"=>",:,,:,,:", "member"=>",:,,:,,:", "grep"=>",:,,:,,:", "_reverse"=>",:,,:,,:", "find"=>",:,,:,,:", "detect"=>",:,,:,,:", "0"=>"2,1,:,98,:,33,:", "flatten"=>",:,,:,,:", "invoke"=>",:,,:,,:", "include"=>",:,,:,,:", "1"=>"0,2,:,178,:,42,:", "clone"=>",:,,:,,:", "compact"=>",:,,:,,:", "first"=>",:,,:,,:", "entries"=>",:,,:,,:", "min"=>",:,,:,,:", "inGroupsOf"=>",:,,:,,:", "2"=>"0,1,:,122,:,105,:", "inject"=>",:,,:,,:", "select"=>",:,,:,,:", "reject"=>",:,,:,,:", "without"=>",:,,:,,:", "eachSlice"=>",:,,:,,:"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 21:50:09 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",:,,:,,:", "size"=>",:,,:,,:", "zip"=>",:,,:,,:", "toArray"=>",:,,:,,:", "sortBy"=>",:,,:,,:", "partition"=>",:,,:,,:", "findAll"=>",:,,:,,:", "any"=>",:,,:,,:", "all"=>",:,,:,,:", "intersect"=>",:,,:,,:", "clear"=>",:,,:,,:", "_each"=>",:,,:,,:", "uniq"=>",:,,:,,:", "pluck"=>",:,,:,,:", "collect"=>",:,,:,,:", "each"=>",:,,:,,:", "last"=>",:,,:,,:", "max"=>",:,,:,,:", "member"=>",:,,:,,:", "grep"=>",:,,:,,:", "_reverse"=>",:,,:,,:", "find"=>",:,,:,,:", "detect"=>",:,,:,,:", "0"=>"1,2,:,112,:,47,:", "flatten"=>",:,,:,,:", "invoke"=>",:,,:,,:", "include"=>",:,,:,,:", "1"=>"2,0,:,186,:,53,:", "clone"=>",:,,:,,:", "compact"=>",:,,:,,:", "first"=>",:,,:,,:", "entries"=>",:,,:,,:", "min"=>",:,,:,,:", "inGroupsOf"=>",:,,:,,:", "2"=>"1,0,:,153,:,121,:", "inject"=>",:,,:,,:", "select"=>",:,,:,,:", "reject"=>",:,,:,,:", "without"=>",:,,:,,:", "eachSlice"=>",:,,:,,:"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 21:53:54 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",:,,:,,:", "size"=>",:,,:,,:", "zip"=>",:,,:,,:", "toArray"=>",:,,:,,:", "sortBy"=>",:,,:,,:", "partition"=>",:,,:,,:", "findAll"=>",:,,:,,:", "any"=>",:,,:,,:", "all"=>",:,,:,,:", "intersect"=>",:,,:,,:", "clear"=>",:,,:,,:", "_each"=>",:,,:,,:", "uniq"=>",:,,:,,:", "pluck"=>",:,,:,,:", "collect"=>",:,,:,,:", "each"=>",:,,:,,:", "last"=>",:,,:,,:", "max"=>",:,,:,,:", "member"=>",:,,:,,:", "grep"=>",:,,:,,:", "_reverse"=>",:,,:,,:", "find"=>",:,,:,,:", "detect"=>",:,,:,,:", "0"=>"2,1,:,194,:,37,:", "flatten"=>",:,,:,,:", "invoke"=>",:,,:,,:", "include"=>",:,,:,,:", "1"=>"2,0,:,266,:,46,:", "clone"=>",:,,:,,:", "compact"=>",:,,:,,:", "first"=>",:,,:,,:", "entries"=>",:,,:,,:", "min"=>",:,,:,,:", "inGroupsOf"=>",:,,:,,:", "2"=>"1,0,:,245,:,84,:", "inject"=>",:,,:,,:", "select"=>",:,,:,,:", "reject"=>",:,,:,,:", "without"=>",:,,:,,:", "eachSlice"=>",:,,:,,:"}
Rendered home/index.html.erb within layouts/application (2.5ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 21:56:50 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",:,,:,,:", "size"=>",:,,:,,:", "zip"=>",:,,:,,:", "toArray"=>",:,,:,,:", "sortBy"=>",:,,:,,:", "partition"=>",:,,:,,:", "findAll"=>",:,,:,,:", "any"=>",:,,:,,:", "all"=>",:,,:,,:", "intersect"=>",:,,:,,:", "clear"=>",:,,:,,:", "_each"=>",:,,:,,:", "uniq"=>",:,,:,,:", "pluck"=>",:,,:,,:", "collect"=>",:,,:,,:", "each"=>",:,,:,,:", "last"=>",:,,:,,:", "max"=>",:,,:,,:", "member"=>",:,,:,,:", "grep"=>",:,,:,,:", "_reverse"=>",:,,:,,:", "find"=>",:,,:,,:", "detect"=>",:,,:,,:", "0"=>"2,1,:,175,:,62,:", "flatten"=>",:,,:,,:", "invoke"=>",:,,:,,:", "include"=>",:,,:,,:", "1"=>"0,2,:,258,:,66,:", "clone"=>",:,,:,,:", "compact"=>",:,,:,,:", "first"=>",:,,:,,:", "entries"=>",:,,:,,:", "min"=>",:,,:,,:", "inGroupsOf"=>",:,,:,,:", "2"=>"0,1,:,223,:,127,:", "inject"=>",:,,:,,:", "select"=>",:,,:,,:", "reject"=>",:,,:,,:", "without"=>",:,,:,,:", "eachSlice"=>",:,,:,,:"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 21:59:06 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 21:59:14 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",:,,", "size"=>",:,,", "zip"=>",:,,", "toArray"=>",:,,", "sortBy"=>",:,,", "partition"=>",:,,", "findAll"=>",:,,", "any"=>",:,,", "all"=>",:,,", "intersect"=>",:,,", "clear"=>",:,,", "_each"=>",:,,", "uniq"=>",:,,", "pluck"=>",:,,", "collect"=>",:,,", "each"=>",:,,", "last"=>",:,,", "max"=>",:,,", "member"=>",:,,", "grep"=>",:,,", "_reverse"=>",:,,", "find"=>",:,,", "detect"=>",:,,", "0"=>"2,1,:,201,46", "flatten"=>",:,,", "invoke"=>",:,,", "include"=>",:,,", "1"=>"0,2,:,282,50", "clone"=>",:,,", "compact"=>",:,,", "first"=>",:,,", "entries"=>",:,,", "min"=>",:,,", "inGroupsOf"=>",:,,", "2"=>"0,1,:,262,94", "inject"=>",:,,", "select"=>",:,,", "reject"=>",:,,", "without"=>",:,,", "eachSlice"=>",:,,"}
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:06:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",:,,", "size"=>",:,,", "zip"=>",:,,", "toArray"=>",:,,", "sortBy"=>",:,,", "partition"=>",:,,", "findAll"=>",:,,", "any"=>",:,,", "all"=>",:,,", "intersect"=>",:,,", "clear"=>",:,,", "_each"=>",:,,", "uniq"=>",:,,", "pluck"=>",:,,", "collect"=>",:,,", "each"=>",:,,", "last"=>",:,,", "max"=>",:,,", "member"=>",:,,", "grep"=>",:,,", "_reverse"=>",:,,", "find"=>",:,,", "detect"=>",:,,", "0"=>"2,1,:,124,106", "flatten"=>",:,,", "invoke"=>",:,,", "include"=>",:,,", "1"=>"0,2,:,233,108", "clone"=>",:,,", "compact"=>",:,,", "first"=>",:,,", "entries"=>",:,,", "min"=>",:,,", "inGroupsOf"=>",:,,", "2"=>"0,1,:,196,167", "inject"=>",:,,", "select"=>",:,,", "reject"=>",:,,", "without"=>",:,,", "eachSlice"=>",:,,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:08:51 +0530 2010

SyntaxError (/home/guest/box/rail/graph/app/controllers/home_controller.rb:21: syntax error, unexpected tINTEGER, expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END
		puts "node",a[:1]
		                ^
/home/guest/box/rail/graph/app/controllers/home_controller.rb:92: syntax error, unexpected $end, expecting kEND):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.4ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (7.1ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (14.3ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 22:11:33 +0530 2010

SyntaxError (/home/guest/box/rail/graph/app/controllers/home_controller.rb:21: syntax error, unexpected tINTEGER, expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END
		puts "node",a[:1]
		                ^
/home/guest/box/rail/graph/app/controllers/home_controller.rb:92: syntax error, unexpected $end, expecting kEND):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (2.1ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (7.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 22:11:34 +0530 2010

SyntaxError (/home/guest/box/rail/graph/app/controllers/home_controller.rb:21: syntax error, unexpected tINTEGER, expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END
		puts "node",a[:1]
		                ^
/home/guest/box/rail/graph/app/controllers/home_controller.rb:92: syntax error, unexpected $end, expecting kEND):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (40.6ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (45.8ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 22:12:09 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:12:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,146,30", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,272,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,229,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:17:14 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,248,33", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,345,54", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,331,97", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:17:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,260,85", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",313,97", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,297,143", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:18:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,154,46", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,246,42", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 22:32:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:32:47 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,159,56", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,343,72", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,251,159", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:34:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,101,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,342,35", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,329,151", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Completed   in 1ms

ArgumentError (wrong number of arguments (2 for 1)):
  app/controllers/home_controller.rb:21:in `split'
  app/controllers/home_controller.rb:21:in `index'
  app/controllers/home_controller.rb:20:in `each'
  app/controllers/home_controller.rb:20:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (20.1ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (25.4ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 22:35:04 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:35:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,190,99", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,281,69", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.6ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:35:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,188,97", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,295,85", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 22:51:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:51:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,123,93", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,226,142", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,162,172", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 22:52:52 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:52:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,202,54", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",278,70", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,240,120", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 22:54:04 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 22:54:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,182,27", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,295,19", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,260,82", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.1ms)
Completed 200 OK in 7ms (Views: 6.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 23:00:07 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 23:00:20 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:00:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,60,63", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,164,59", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,126,109", "inject"=>",,", "select"=>",,", "3"=>",136,115", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 8ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 23:03:34 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 23:03:41 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:03:48 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,101,31", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,248,33", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,179,150", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 23:08:53 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:08:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,102,46", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,281,24", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,202,130", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.5ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 23:10:10 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:10:16 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,124,32", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,214,26", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,194,102", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 23:11:17 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:11:23 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,98,48", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,214,54", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,158,168", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 23:12:40 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:12:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,134,29", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,296,49", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,188,131", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:13:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,3,145,67", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",236,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,3,211,126", "inject"=>",,", "select"=>",,", "3"=>"0,2,246,88", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:13:52 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,3,145,67", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",236,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,3,211,126", "inject"=>",,", "select"=>",,", "3"=>"0,2,246,88", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:13:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,3,145,67", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",236,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,3,211,126", "inject"=>",,", "select"=>",,", "3"=>"0,2,246,88", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 8ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 23:13:59 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:14:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,133,57", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,186,56", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,165,104", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:14:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,150,57", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,239,57", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,206,100", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:34:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,56", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,310,51", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,199,171", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Completed   in 2ms

NameError (undefined local variable or method `nodes' for #<HomeController:0xb5f5ad9c>):
  app/controllers/home_controller.rb:23:in `index'
  app/controllers/home_controller.rb:20:in `each'
  app/controllers/home_controller.rb:20:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (19.9ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (25.1ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 23:34:48 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 45ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:34:54 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,76,71", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,219,73", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,156,141", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:38:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,113,57", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",202,66", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,141,129", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:38:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,125,44", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,250,48", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,166,146", "inject"=>",,", "select"=>",,", "3"=>"1,283,141", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 47ms (Views: 45.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:40:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,138,53", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,245,54", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,179,128", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:40:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,173,47", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,280,42", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,202,133", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:41:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,138,55", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,245,46", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,193,176", "inject"=>",,", "select"=>",,", "3"=>",256,50", "reject"=>",,", "4"=>"1,201,184", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 49ms (Views: 48.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:41:42 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,144,63", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,282,63", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,217,162", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:42:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,89,58", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,214,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,145,165", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 23:44:06 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 53ms (Views: 52.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:44:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,157,57", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,254,48", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,225,113", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:45:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,3,1,105,79", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,179,92", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,152,131", "inject"=>",,", "select"=>",,", "3"=>"0,156,142", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:46:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,103,57", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,215,69", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,169,140", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (49.3ms)
Completed 200 OK in 54ms (Views: 53.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Fri Sep 24 23:57:54 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.5ms)
Completed 200 OK in 9ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:57:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",132,46", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Fri Sep 24 23:58:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,152,61", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,243,57", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.7ms)
Completed 200 OK in 10ms (Views: 9.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 08:43:29 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (10.6ms)
Completed 200 OK in 24ms (Views: 23.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 08:43:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",86,63", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",165,52", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",128,120", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 08:43:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,127,63", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",151,108", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,167,52", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 08:48:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,127,55", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,210,55", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,187,114", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 8ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 08:51:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,108,56", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,243,37", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,200,147", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 08:53:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,119,29", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,206,32", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,174,104", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.4ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 08:54:32 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,108,46", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,213,43", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,3,1,172,154", "inject"=>",,", "select"=>",,", "3"=>"2,184,154", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.3ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:20:16 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:20:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",155,78", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:20:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,116,47", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,182,49", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,139,131", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:21:59 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:22:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",167,76", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",249,76", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",191,178", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Completed   in 1ms

ArgumentError (invalid value for Integer: ""):
  app/controllers/home_controller.rb:53:in `Integer'
  app/controllers/home_controller.rb:53:in `index'
  app/controllers/home_controller.rb:51:in `each'
  app/controllers/home_controller.rb:51:in `index'
  app/controllers/home_controller.rb:47:in `each'
  app/controllers/home_controller.rb:47:in `index'
  app/controllers/home_controller.rb:42:in `each'
  app/controllers/home_controller.rb:42:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (19.6ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (25.2ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:25:06 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,177,34", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,239,11", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,233,91", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:25:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:25:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,136,62", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,241,56", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,216,120", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:25:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"5,4,199,105", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",169,80", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",266,61", "inject"=>",,", "select"=>",,", "3"=>",259,127", "reject"=>",,", "4"=>"0,5,226,160", "without"=>",,", "eachSlice"=>",,", "5"=>"0,4,153,147"}
Completed   in 1ms

ArgumentError (invalid value for Integer: ""):
  app/controllers/home_controller.rb:53:in `Integer'
  app/controllers/home_controller.rb:53:in `index'
  app/controllers/home_controller.rb:51:in `each'
  app/controllers/home_controller.rb:51:in `index'
  app/controllers/home_controller.rb:47:in `each'
  app/controllers/home_controller.rb:47:in `index'
  app/controllers/home_controller.rb:42:in `each'
  app/controllers/home_controller.rb:42:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (21.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (26.1ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:26:42 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:26:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",157,45", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",265,72", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",217,135", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Completed   in 1ms

ArgumentError (invalid value for Integer: ""):
  app/controllers/home_controller.rb:53:in `Integer'
  app/controllers/home_controller.rb:53:in `index'
  app/controllers/home_controller.rb:51:in `each'
  app/controllers/home_controller.rb:51:in `index'
  app/controllers/home_controller.rb:47:in `each'
  app/controllers/home_controller.rb:47:in `index'
  app/controllers/home_controller.rb:42:in `each'
  app/controllers/home_controller.rb:42:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (20.6ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (25.8ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:28:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",157,45", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",265,72", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",217,135", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Completed   in 1ms

ArgumentError (invalid value for Integer: ""):
  app/controllers/home_controller.rb:54:in `Integer'
  app/controllers/home_controller.rb:54:in `index'
  app/controllers/home_controller.rb:51:in `each'
  app/controllers/home_controller.rb:51:in `index'
  app/controllers/home_controller.rb:47:in `each'
  app/controllers/home_controller.rb:47:in `index'
  app/controllers/home_controller.rb:42:in `each'
  app/controllers/home_controller.rb:42:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (20.8ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (26.2ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:28:14 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:28:16 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",132,115", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:28:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",143,81", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",226,59", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",178,137", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Completed   in 1ms

ArgumentError (invalid value for Integer: ""):
  app/controllers/home_controller.rb:54:in `Integer'
  app/controllers/home_controller.rb:54:in `index'
  app/controllers/home_controller.rb:51:in `each'
  app/controllers/home_controller.rb:51:in `index'
  app/controllers/home_controller.rb:47:in `each'
  app/controllers/home_controller.rb:47:in `index'
  app/controllers/home_controller.rb:42:in `each'
  app/controllers/home_controller.rb:42:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (20.0ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (25.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:28:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:28:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",134,29", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",173,119", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",130,181", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:29:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",165,71", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",220,56", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",176,128", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:29:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,140,88", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,281,74", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,233,109", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:30:13 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,158,59", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,259,53", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,168,124", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:31:42 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:31:44 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:32:20 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:32:40 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:32:51 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,97,41", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,253,43", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,182,120", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:34:17 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:35:52 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:35:54 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 51ms (Views: 50.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:36:41 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:36:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:36:59 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:37:15 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:37:40 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:37:42 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:39:51 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:39:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",149,88", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",233,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",195,152", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:40:16 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:40:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",196,74", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",295,68", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",237,145", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:40:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:40:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",178,77", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,68", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",206,143", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:40:51 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:40:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",138,70", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",215,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:40:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",138,70", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",215,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:40:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",138,70", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",215,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:40:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",138,70", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",215,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:40:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",138,70", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",215,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:40:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",138,70", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",215,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:40:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",138,70", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",215,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:40:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",138,70", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",215,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:41:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",138,70", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",215,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:41:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",138,70", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",215,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:41:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",138,70", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",215,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:41:01 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",138,70", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",215,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:41:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,1,147,85", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,214,72", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,3,231,142", "inject"=>",,", "select"=>",,", "3"=>"0,2,190,131", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:41:20 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:41:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",232,111", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:45:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:46:01 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",175,61", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",288,59", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",223,135", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:48:05 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:48:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,105,59", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,259,49", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,221,96", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:48:21 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:48:28 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,208,93", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,285,63", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,271,138", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:49:08 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:49:16 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,157,61", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,244,64", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,221,131", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:51:27 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:51:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,161,64", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,186,133", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,160,195", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:52:20 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:52:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,170,55", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,258,54", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,226,118", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:53:29 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:53:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,139,52", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,292,50", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,223,150", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:54:46 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:54:48 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",170,66", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",288,67", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",226,138", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (30.8ms)
Completed   in 36ms

ActionView::Template::Error (undefined local variable or method `null' for #<#<Class:0xb5eee534>:0xb5eed6c0>):
    35: <% for n, neigh in @adj_arg %>
    36: document.writeln("hrllo");
    37: 
    38: <% if neigh != null %>
    39: document.writeln(<%= n %>);
    40: document.writeln(<%= neigh %>);
    41: 		nodes[<%= n %>].adj = <%= neigh %>;
  app/views/home/index.html.erb:38:in `_app_views_home_index_html_erb___345767387__621321148_0'
  app/views/home/index.html.erb:35:in `each'
  app/views/home/index.html.erb:35:in `_app_views_home_index_html_erb___345767387__621321148_0'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (2.5ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (20.0ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (30.4ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:55:06 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:55:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",145,91", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",184,142", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",107,160", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:55:21 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:55:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",157,54", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",306,82", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",232,113", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:55:35 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:55:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",166,80", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",294,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",256,145", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:56:06 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:56:09 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",131,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",275,62", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",214,135", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (1.6ms)
Completed   in 7ms

ActionView::Template::Error (undefined method `>=' for [""]:Array):
    35: <% for n, neigh in @adj_arg %>
    36: document.writeln("hrllo");
    37: 
    38: <% if neigh >= 0 %>
    39: document.writeln(<%= n %>);
    40: document.writeln(<%= neigh %>);
    41: 		nodes[<%= n %>].adj = <%= neigh %>;
  app/views/home/index.html.erb:38:in `_app_views_home_index_html_erb___345767387__621170368_0'
  app/views/home/index.html.erb:35:in `each'
  app/views/home/index.html.erb:35:in `_app_views_home_index_html_erb___345767387__621170368_0'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.2ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (20.1ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (25.6ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:56:46 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:56:48 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",114,71", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",124,148", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",208,116", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:56:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,215,52", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,346,62", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,306,107", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:57:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,114,42", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,207,32", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,183,109", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 09:58:01 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:58:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",143,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",305,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",232,136", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 09:58:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,181,59", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,318,43", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,286,124", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:00:09 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:00:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,104,71", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,210,69", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,147,154", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:01:35 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",164,44", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",289,53", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",245,121", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:02:43 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:02:45 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:03:20 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:03:22 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:03:50 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (45.9ms)
Completed 200 OK in 51ms (Views: 50.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:04:09 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:04:23 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:04:50 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:05:20 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:05:26 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:05:49 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:05:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",230,122", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",344,102", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",310,153", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:06:11 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:06:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,144,63", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,227,57", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,198,118", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:07:12 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:07:15 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",206,61", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",357,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",280,127", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:07:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,134,87", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,231,78", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,199,132", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:08:26 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:08:28 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:08:38 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,213,69", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,4,2,286,66", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,3,1,252,138", "inject"=>",,", "select"=>",,", "3"=>"2,260,147", "reject"=>",,", "4"=>"1,298,69", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:08:55 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:09:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,152,53", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,287,26", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,201,146", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:15:35 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:16:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,174,57", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,278,40", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,232,156", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (107.0ms)
Completed 200 OK in 121ms (Views: 119.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:17:16 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:17:18 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:17:50 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:18:09 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:18:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",140,80", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",236,83", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",183,168", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:18:15 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,171,71", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",281,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,250,138", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:18:41 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:19:17 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:19:25 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,3,146,60", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",222,59", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,191,115", "inject"=>",,", "select"=>",,", "3"=>"0,157,61", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:20:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:13 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:14 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:22 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 8ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:23 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:24 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:24 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:25 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:25 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:26 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:40 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:41 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:55 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:55 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:56 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 50ms (Views: 49.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:21:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:22:04 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:22:30 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:23:15 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:23:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,155,60", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,217,53", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,201,150", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:23:38 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,291,71", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",250,153", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,201,150", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:24:01 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:24:07 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 10:24:13 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,147,51", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,289,66", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,240,145", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:24:45 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:24:52 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:24:54 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 52ms (Views: 51.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:24:54 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 10:25:09 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 11:59:10 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (17.1ms)
Completed 200 OK in 50ms (Views: 49.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 12:02:20 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:02:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",109,204", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,195,54", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,362,67", "inject"=>",,", "select"=>",,", "3"=>"2,280,133", "reject"=>",,", "4"=>"1,145,123", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 12:02:33 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:02:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,2,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 10ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:23 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.5ms)
Completed 200 OK in 10ms (Views: 9.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.4ms)
Completed 200 OK in 10ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:25 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:25 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 10ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:03:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"32,269,65", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,178,79", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,222,130", "inject"=>",,", "select"=>",,", "3"=>"0,290,146", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 12:07:40 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:07:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",214,50", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,330,54", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,297,101", "inject"=>",,", "select"=>",,", "3"=>"2,289,114", "reject"=>",,", "4"=>"1,236,152", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 10ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 12:09:42 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:09:50 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,141,24", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,232,20", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,206,70", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 12:19:59 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:20:09 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,147,48", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,199,63", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,168,114", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 12:22:04 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:22:13 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,137,47", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,213,44", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,171,198", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Completed   in 1ms

ArgumentError (comparison of String with 0 failed):
  app/controllers/home_controller.rb:73:in `<'
  app/controllers/home_controller.rb:73:in `index'
  app/controllers/home_controller.rb:72:in `each'
  app/controllers/home_controller.rb:72:in `index'
  app/controllers/home_controller.rb:71:in `each'
  app/controllers/home_controller.rb:71:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.9ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (20.9ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (29.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 12:23:08 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:23:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",279,48", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Completed   in 1ms

ArgumentError (invalid value for Integer: ""):
  app/controllers/home_controller.rb:73:in `Integer'
  app/controllers/home_controller.rb:73:in `index'
  app/controllers/home_controller.rb:72:in `each'
  app/controllers/home_controller.rb:72:in `index'
  app/controllers/home_controller.rb:71:in `each'
  app/controllers/home_controller.rb:71:in `index'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.3ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (19.6ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (24.9ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 12:23:50 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:23:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",324,139", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 8ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 12:24:00 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:24:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,80,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,251,42", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,225,162", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 12:25:55 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:25:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",134,74", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 8ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 12:26:01 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:26:09 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,169,60", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,320,50", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,265,111", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 12:26:27 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 12:26:35 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,110,73", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,175,68", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,155,144", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 13:09:11 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:09:13 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",116,114", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (45.9ms)
Completed 200 OK in 51ms (Views: 50.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:09:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,186,61", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,270,61", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,232,115", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 13:24:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:25:06 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,57,48", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,171,103", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,160,56", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 13:26:29 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 13:26:36 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:26:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,101,26", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,236,32", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,141,200", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:27:29 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,101,26", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,236,32", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,141,200", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:28:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,101,26", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,236,32", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,141,200", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.7ms)
Completed 200 OK in 10ms (Views: 9.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:30:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,101,26", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,236,32", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,141,200", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:31:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,101,26", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,236,32", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,141,200", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:35:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,101,26", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,236,32", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,141,200", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:35:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,101,26", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,236,32", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,141,200", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 10ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 13:37:23 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:37:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,295,179", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,476,169", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,438,305", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 13:38:42 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 13:38:50 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:38:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,402,150", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,460,162", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,450,210", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 9ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:41:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,402,150", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,460,162", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,450,210", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 10ms (Views: 9.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 13:42:20 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 13:42:28 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",202,223", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:23:10 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (5.7ms)
Completed 200 OK in 19ms (Views: 18.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:28:21 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:32:19 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:32:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 8ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:32:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:32:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,284,234", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,0,2,395,151", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,187,62", "inject"=>",,", "select"=>",,", "3"=>"1,405,157", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 10ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:33:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,284,234", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,0,2,395,151", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,187,62", "inject"=>",,", "select"=>",,", "3"=>"1,405,157", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:33:50 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,284,234", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,0,2,395,151", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,187,62", "inject"=>",,", "select"=>",,", "3"=>"1,405,157", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:33:51 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:33:54 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",130,162", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 8ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:34:37 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:34:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,185,84", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,376,82", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,270,227", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:35:14 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,196,87", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,376,82", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,270,227", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:35:24 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:37:34 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:37:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,167,62", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,256,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,214,122", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:38:51 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,167,62", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,256,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,214,122", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:39:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,167,62", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,256,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,214,122", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:41:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,167,62", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,256,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,214,122", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:43:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,167,62", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,256,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,214,122", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:43:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,167,62", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,256,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,214,122", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:43:29 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,167,62", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,256,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,214,122", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:43:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,167,62", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,256,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,214,122", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:43:47 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,167,62", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,256,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,214,122", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:44:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,167,62", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,256,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,214,122", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:44:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,167,62", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,256,60", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,214,122", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:44:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:45:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",145,96", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",280,82", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",221,193", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:45:16 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,216,81", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",344,99", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",306,146", "inject"=>",,", "select"=>",,", "3"=>"0,231,88", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:45:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,216,81", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",344,99", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",306,146", "inject"=>",,", "select"=>",,", "3"=>"0,231,88", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:48:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,216,81", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",344,99", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",306,146", "inject"=>",,", "select"=>",,", "3"=>"0,231,88", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:48:14 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:48:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,119,88", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,277,92", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,189,167", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:49:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,119,88", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,277,92", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,189,167", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:49:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",222,107", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",342,128", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",230,235", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:49:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",206,158", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,333,149", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,300,220", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:49:40 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:49:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,137,73", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",237,76", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,184,158", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:50:23 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,2,1,196,74", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,3,0,313,78", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,3,293,169", "inject"=>",,", "select"=>",,", "3"=>"0,2,1,194,159", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 10ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:50:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",136,106", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,309,106", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,205,251", "inject"=>",,", "select"=>",,", "3"=>"1,440,252", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:54:52 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",136,106", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,309,106", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,205,251", "inject"=>",,", "select"=>",,", "3"=>"1,440,252", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 10ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:55:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",136,106", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,309,106", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,205,251", "inject"=>",,", "select"=>",,", "3"=>"1,440,252", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:55:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",136,106", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,309,106", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,205,251", "inject"=>",,", "select"=>",,", "3"=>"1,440,252", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:55:32 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:55:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:55:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",278,116", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:55:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,3,305,107", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,445,124", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,3,338,226", "inject"=>",,", "select"=>",,", "3"=>"1,2,0,459,126", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.3ms)
Completed 200 OK in 10ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:56:09 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,3,305,107", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,445,124", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,3,338,226", "inject"=>",,", "select"=>",,", "3"=>"1,2,0,459,126", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.4ms)
Completed 200 OK in 10ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:56:28 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,3,305,107", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,445,124", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,3,338,226", "inject"=>",,", "select"=>",,", "3"=>"1,2,0,459,126", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:57:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,3,305,107", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,445,124", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,3,338,226", "inject"=>",,", "select"=>",,", "3"=>"1,2,0,459,126", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 10ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 14:57:54 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 14:58:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,143,74", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,269,80", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,185,225", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 10ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:02:17 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,143,74", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,269,80", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,185,225", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 10ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 15:03:15 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:03:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,174,92", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,294,89", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,192,226", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:03:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,174,92", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,294,89", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,192,226", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.3ms)
Completed 200 OK in 10ms (Views: 9.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 15:03:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:04:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,168,57", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,294,114", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,162,176", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:04:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,239,61", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,372,67", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,305,171", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 15:04:30 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:04:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",211,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,95,208", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",308,233", "inject"=>",,", "select"=>",,", "3"=>"1,173,309", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:06:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",211,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,95,208", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",308,233", "inject"=>",,", "select"=>",,", "3"=>"1,173,309", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.3ms)
Completed 200 OK in 10ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 15:06:28 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:06:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",157,104", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",291,116", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",192,233", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:10:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",157,104", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",291,116", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",192,233", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.3ms)
Completed 200 OK in 55ms (Views: 54.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:10:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,225,69", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,398,94", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,291,201", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:12:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,225,69", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,398,94", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,291,201", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.7ms)
Completed 200 OK in 10ms (Views: 9.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:13:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,225,69", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,398,94", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,291,201", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (5.7ms)
Completed 200 OK in 54ms (Views: 53.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:13:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,225,69", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,398,94", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,291,201", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 15:14:11 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 15:14:18 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:14:27 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:14:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:32:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:33:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:34:48 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:35:35 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 9ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:37:14 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:37:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:38:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:39:13 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:39:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 15:40:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:12:38 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:13:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:13:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:14:52 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:14:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:19:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 10ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:19:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,125,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,70,165", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,183,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
ERROR: compiling _app_views_home_index_html_erb___345767387__621173868_0 RAISED compile error
/home/guest/box/rail/graph/app/views/home/index.html.erb:43: syntax error, unexpected ')', expecting '='
...);@output_buffer.append= ( * );@output_buffer.safe_concat(')...
                              ^
/home/guest/box/rail/graph/app/views/home/index.html.erb:44: syntax error, unexpected kEND, expecting ')'
'); end 
       ^
/home/guest/box/rail/graph/app/views/home/index.html.erb:47: syntax error, unexpected kEND, expecting ')'
'); end 
       ^
/home/guest/box/rail/graph/app/views/home/index.html.erb:79: syntax error, unexpected kENSURE, expecting ')'
/home/guest/box/rail/graph/app/views/home/index.html.erb:81: syntax error, unexpected kEND, expecting ')'
Function body:           def _app_views_home_index_html_erb___345767387__621173868_0(local_assigns)
            _old_virtual_path, @_virtual_path = @_virtual_path, "home/index";_old_output_buffer = @output_buffer;;@output_buffer = ActionView::OutputBuffer.new;@output_buffer.safe_concat('<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="robots" content="noindex">
<title>Graph Coloring Prob !</title>
</head>

<body >
<h1>Vertex coloring problem </h1>
<canvas id = "node" ></canvas>
<div class="sidebar">
Welcome to Canvas<br>
To Draw<br>
1 click - create a node
click 2 nodes - an edge
Maximum of 10 colors provided
<br>
<br>
<button type="button" id="b" onclick="submit(); "> color it ! </button>
</div>


<script>
//');@output_buffer.append= ( @nodes );@output_buffer.safe_concat('
');@output_buffer.safe_concat('//');@output_buffer.append= ( @adj_arg );@output_buffer.safe_concat('
');@output_buffer.safe_concat('//');@output_buffer.append= ( @colored );@output_buffer.safe_concat('
');@output_buffer.safe_concat('
'); if @nodes 
 for n, co in @nodes 
@output_buffer.safe_concat('	   nodes[');@output_buffer.append= ( n );@output_buffer.safe_concat('] = new node(');@output_buffer.append= ( n );@output_buffer.safe_concat(', ');@output_buffer.append= ( co[0] );@output_buffer.safe_concat(', ');@output_buffer.append= ( co[1] );@output_buffer.safe_concat(', [], 0);
'); end 
 end 
@output_buffer.safe_concat('

'); for n, neigh in @adj_arg 
@output_buffer.safe_concat('document.writeln(');@output_buffer.append= ( n );@output_buffer.safe_concat(');
document.writeln(":");
document.writeln(');@output_buffer.append= ( neigh );@output_buffer.safe_concat(');
document.writeln(":");
'); for a in neigh 
@output_buffer.safe_concat('	document.writeln(');@output_buffer.append= ( a );@output_buffer.safe_concat(');
	document.writeln(');@output_buffer.append= ( * );@output_buffer.safe_concat(');
'); end 
@output_buffer.safe_concat('nodes[');@output_buffer.append= ( n );@output_buffer.safe_concat('].adj = ');@output_buffer.append= ( neigh );@output_buffer.safe_concat(';

'); end 
@output_buffer.safe_concat('/*
//'); if @colored ;@output_buffer.safe_concat('
'); for col, n in @colored 
@output_buffer.safe_concat('//document.writeln("to do");
//document.writeln("');@output_buffer.append= ( col );@output_buffer.safe_concat('");
//document.writeln(');@output_buffer.append= ( n );@output_buffer.safe_concat(');

//'); if n ;@output_buffer.safe_concat('
');@output_buffer.safe_concat('//	'); for i in n ;@output_buffer.safe_concat('
');@output_buffer.safe_concat('//		nodes[');@output_buffer.append= ( i );@output_buffer.safe_concat('].color = ');@output_buffer.append= ( col );@output_buffer.safe_concat(';
//	'); end ;@output_buffer.safe_concat('
');@output_buffer.safe_concat('//'); end ;@output_buffer.safe_concat('
'); end 
@output_buffer.safe_concat('//'); end ;@output_buffer.safe_concat('
');@output_buffer.safe_concat('

*/ 


    gCanvasElement = document.getElementById("node");
   	gCanvasElement.width = kPixelWidth;
   	gCanvasElement.height = kPixelHeight;
   	gDrawingContext = gCanvasElement.getContext("2d");
	gCanvasElement.addEventListener("click", nodeOnClick, false);

	draw();

</script>
</body>
</html>
');@output_buffer.to_s
          ensure
            @_virtual_path, @output_buffer = _old_virtual_path, _old_output_buffer
          end
Backtrace: /home/guest/box/rail/graph/app/views/home/index.html.erb:81:in `compile'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_view/template.rb:134:in `render'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications.rb:54:in `instrument'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_view/template.rb:127:in `render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_view/render/rendering.rb:59:in `_render_template'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications.rb:52:in `instrument'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications/instrumenter.rb:21:in `instrument'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications.rb:52:in `instrument'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_view/render/rendering.rb:56:in `_render_template'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_view/render/rendering.rb:26:in `render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/rendering.rb:114:in `_render_template'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/rendering.rb:108:in `render_to_body'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/renderers.rb:47:in `render_to_body'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/compatibility.rb:55:in `render_to_body'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/rendering.rb:101:in `render_to_string'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/rendering.rb:92:in `render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/rendering.rb:17:in `render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/instrumentation.rb:40:in `render'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/core_ext/benchmark.rb:5:in `ms'
/usr/lib/ruby/1.8/benchmark.rb:308:in `realtime'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/core_ext/benchmark.rb:5:in `ms'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/instrumentation.rb:40:in `render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/instrumentation.rb:78:in `cleanup_view_runtime'
/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.0/lib/active_record/railties/controller_runtime.rb:15:in `cleanup_view_runtime'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/instrumentation.rb:39:in `render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/implicit_render.rb:10:in `default_render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/implicit_render.rb:5:in `send_action'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/base.rb:150:in `process_action'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/rendering.rb:11:in `process_action'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/callbacks.rb:18:in `process_action'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/callbacks.rb:435:in `_run__738958071__process_action__199225275__callbacks'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/callbacks.rb:409:in `send'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/callbacks.rb:409:in `_run_process_action_callbacks'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/callbacks.rb:93:in `send'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/callbacks.rb:93:in `run_callbacks'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/callbacks.rb:17:in `process_action'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/instrumentation.rb:30:in `process_action'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications.rb:52:in `instrument'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications/instrumenter.rb:21:in `instrument'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications.rb:52:in `instrument'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/instrumentation.rb:29:in `process_action'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/rescue.rb:17:in `process_action'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/base.rb:119:in `process'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/rendering.rb:40:in `process'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal.rb:133:in `dispatch'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal.rb:173
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/routing/route_set.rb:62:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/routing/route_set.rb:62:in `dispatch'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/routing/route_set.rb:27:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-mount-0.6.13/lib/rack/mount/route_set.rb:148:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-mount-0.6.13/lib/rack/mount/code_generation.rb:93:in `recognize'
/usr/lib/ruby/gems/1.8/gems/rack-mount-0.6.13/lib/rack/mount/code_generation.rb:68:in `optimized_each'
/usr/lib/ruby/gems/1.8/gems/rack-mount-0.6.13/lib/rack/mount/code_generation.rb:92:in `recognize'
/usr/lib/ruby/gems/1.8/gems/rack-mount-0.6.13/lib/rack/mount/route_set.rb:139:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/routing/route_set.rb:492:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/head.rb:14:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/methodoverride.rb:24:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/params_parser.rb:21:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/flash.rb:182:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/session/abstract_store.rb:149:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/cookies.rb:287:in `call'
/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.0/lib/active_record/query_cache.rb:32:in `call'
/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.0/lib/active_record/connection_adapters/abstract/query_cache.rb:28:in `cache'
/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.0/lib/active_record/query_cache.rb:12:in `cache'
/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.0/lib/active_record/query_cache.rb:31:in `call'
/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:355:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/callbacks.rb:46:in `call'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/callbacks.rb:415:in `_run_call_callbacks'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/callbacks.rb:44:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/sendfile.rb:107:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/remote_ip.rb:48:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/show_exceptions.rb:46:in `call'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/rack/logger.rb:13:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/runtime.rb:17:in `call'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/cache/strategy/local_cache.rb:72:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/lock.rb:11:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/lock.rb:11:in `synchronize'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/lock.rb:11:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/static.rb:30:in `call'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/application.rb:168:in `call'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/application.rb:77:in `send'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/application.rb:77:in `method_missing'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/rack/log_tailer.rb:14:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/content_length.rb:13:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/handler/webrick.rb:52:in `service'
/usr/lib/ruby/1.8/webrick/httpserver.rb:104:in `service'
/usr/lib/ruby/1.8/webrick/httpserver.rb:65:in `run'
/usr/lib/ruby/1.8/webrick/server.rb:173:in `start_thread'
/usr/lib/ruby/1.8/webrick/server.rb:162:in `start'
/usr/lib/ruby/1.8/webrick/server.rb:162:in `start_thread'
/usr/lib/ruby/1.8/webrick/server.rb:95:in `start'
/usr/lib/ruby/1.8/webrick/server.rb:92:in `each'
/usr/lib/ruby/1.8/webrick/server.rb:92:in `start'
/usr/lib/ruby/1.8/webrick/server.rb:23:in `start'
/usr/lib/ruby/1.8/webrick/server.rb:82:in `start'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/handler/webrick.rb:13:in `run'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/server.rb:213:in `start'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/commands/server.rb:65:in `start'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/commands.rb:30
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/commands.rb:27:in `tap'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/commands.rb:27
script/rails:6:in `require'
script/rails:6
Rendered home/index.html.erb within layouts/application (13.6ms)
Completed   in 19ms

ActionView::Template::Error (compile error
/home/guest/box/rail/graph/app/views/home/index.html.erb:43: syntax error, unexpected ')', expecting '='
...);@output_buffer.append= ( * );@output_buffer.safe_concat(')...
                              ^
/home/guest/box/rail/graph/app/views/home/index.html.erb:44: syntax error, unexpected kEND, expecting ')'
'); end 
       ^
/home/guest/box/rail/graph/app/views/home/index.html.erb:47: syntax error, unexpected kEND, expecting ')'
'); end 
       ^
/home/guest/box/rail/graph/app/views/home/index.html.erb:79: syntax error, unexpected kENSURE, expecting ')'
/home/guest/box/rail/graph/app/views/home/index.html.erb:81: syntax error, unexpected kEND, expecting ')'):
    40: document.writeln(":");
    41: <% for a in neigh %>
    42: 	document.writeln(<%= a %>);
    43: 	document.writeln(<%= * %>);
    44: <% end %>
    45: nodes[<%= n %>].adj = <%= neigh %>;
    46: 
  app/views/home/index.html.erb:81:in `compile'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (1.4ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (22.1ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (28.5ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 16:19:37 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 16:19:42 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:19:48 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,238,86", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,376,82", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,305,203", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:22:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,238,86", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,376,82", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,305,203", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
ERROR: compiling _app_views_home_index_html_erb___345767387__621399578_0 RAISED compile error
/home/guest/box/rail/graph/app/views/home/index.html.erb:76: syntax error, unexpected kENSURE, expecting kEND
/home/guest/box/rail/graph/app/views/home/index.html.erb:78: syntax error, unexpected $end, expecting kEND
Function body:           def _app_views_home_index_html_erb___345767387__621399578_0(local_assigns)
            _old_virtual_path, @_virtual_path = @_virtual_path, "home/index";_old_output_buffer = @output_buffer;;@output_buffer = ActionView::OutputBuffer.new;@output_buffer.safe_concat('<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="robots" content="noindex">
<title>Graph Coloring Prob !</title>
</head>

<body >
<h1>Vertex coloring problem </h1>
<canvas id = "node" ></canvas>
<div class="sidebar">
Welcome to Canvas<br>
To Draw<br>
1 click - create a node
click 2 nodes - an edge
Maximum of 10 colors provided
<br>
<br>
<button type="button" id="b" onclick="submit(); "> color it ! </button>
</div>


<script>
//');@output_buffer.append= ( @nodes );@output_buffer.safe_concat('
');@output_buffer.safe_concat('//');@output_buffer.append= ( @adj_arg );@output_buffer.safe_concat('
');@output_buffer.safe_concat('//');@output_buffer.append= ( @colored );@output_buffer.safe_concat('
');@output_buffer.safe_concat('
'); if @nodes 
 for n, co in @nodes 
@output_buffer.safe_concat('	   nodes[');@output_buffer.append= ( n );@output_buffer.safe_concat('] = new node(');@output_buffer.append= ( n );@output_buffer.safe_concat(', ');@output_buffer.append= ( co[0] );@output_buffer.safe_concat(', ');@output_buffer.append= ( co[1] );@output_buffer.safe_concat(', [], 0);
'); end 
 end 
@output_buffer.safe_concat('

'); for n, neigh in @adj_arg 
@output_buffer.safe_concat('document.writeln(');@output_buffer.append= ( n );@output_buffer.safe_concat(');
document.writeln(":");
document.writeln(');@output_buffer.append= ( neigh );@output_buffer.safe_concat(');
document.writeln(":");
'); for a in neigh 
@output_buffer.safe_concat('	nodes[');@output_buffer.append= ( n );@output_buffer.safe_concat('].adj.push(');@output_buffer.append= ( a );@output_buffer.safe_concat(');
% end %>
'); end 
@output_buffer.safe_concat('/*
//'); if @colored ;@output_buffer.safe_concat('
'); for col, n in @colored 
@output_buffer.safe_concat('//document.writeln("to do");
//document.writeln("');@output_buffer.append= ( col );@output_buffer.safe_concat('");
//document.writeln(');@output_buffer.append= ( n );@output_buffer.safe_concat(');

//'); if n ;@output_buffer.safe_concat('
');@output_buffer.safe_concat('//	'); for i in n ;@output_buffer.safe_concat('
');@output_buffer.safe_concat('//		nodes[');@output_buffer.append= ( i );@output_buffer.safe_concat('].color = ');@output_buffer.append= ( col );@output_buffer.safe_concat(';
//	'); end ;@output_buffer.safe_concat('
');@output_buffer.safe_concat('//'); end ;@output_buffer.safe_concat('
'); end 
@output_buffer.safe_concat('//'); end ;@output_buffer.safe_concat('
');@output_buffer.safe_concat('

*/ 


    gCanvasElement = document.getElementById("node");
   	gCanvasElement.width = kPixelWidth;
   	gCanvasElement.height = kPixelHeight;
   	gDrawingContext = gCanvasElement.getContext("2d");
	gCanvasElement.addEventListener("click", nodeOnClick, false);

	draw();

</script>
</body>
</html>
');@output_buffer.to_s
          ensure
            @_virtual_path, @output_buffer = _old_virtual_path, _old_output_buffer
          end
Backtrace: /home/guest/box/rail/graph/app/views/home/index.html.erb:78:in `compile'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_view/template.rb:134:in `render'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications.rb:54:in `instrument'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_view/template.rb:127:in `render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_view/render/rendering.rb:59:in `_render_template'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications.rb:52:in `instrument'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications/instrumenter.rb:21:in `instrument'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications.rb:52:in `instrument'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_view/render/rendering.rb:56:in `_render_template'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_view/render/rendering.rb:26:in `render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/rendering.rb:114:in `_render_template'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/rendering.rb:108:in `render_to_body'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/renderers.rb:47:in `render_to_body'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/compatibility.rb:55:in `render_to_body'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/rendering.rb:101:in `render_to_string'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/rendering.rb:92:in `render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/rendering.rb:17:in `render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/instrumentation.rb:40:in `render'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/core_ext/benchmark.rb:5:in `ms'
/usr/lib/ruby/1.8/benchmark.rb:308:in `realtime'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/core_ext/benchmark.rb:5:in `ms'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/instrumentation.rb:40:in `render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/instrumentation.rb:78:in `cleanup_view_runtime'
/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.0/lib/active_record/railties/controller_runtime.rb:15:in `cleanup_view_runtime'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/instrumentation.rb:39:in `render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/implicit_render.rb:10:in `default_render'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/implicit_render.rb:5:in `send_action'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/base.rb:150:in `process_action'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/rendering.rb:11:in `process_action'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/callbacks.rb:18:in `process_action'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/callbacks.rb:435:in `_run__738958071__process_action__199225275__callbacks'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/callbacks.rb:409:in `send'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/callbacks.rb:409:in `_run_process_action_callbacks'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/callbacks.rb:93:in `send'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/callbacks.rb:93:in `run_callbacks'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/callbacks.rb:17:in `process_action'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/instrumentation.rb:30:in `process_action'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications.rb:52:in `instrument'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications/instrumenter.rb:21:in `instrument'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/notifications.rb:52:in `instrument'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/instrumentation.rb:29:in `process_action'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/rescue.rb:17:in `process_action'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/base.rb:119:in `process'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/abstract_controller/rendering.rb:40:in `process'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal.rb:133:in `dispatch'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_controller/metal.rb:173
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/routing/route_set.rb:62:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/routing/route_set.rb:62:in `dispatch'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/routing/route_set.rb:27:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-mount-0.6.13/lib/rack/mount/route_set.rb:148:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-mount-0.6.13/lib/rack/mount/code_generation.rb:93:in `recognize'
/usr/lib/ruby/gems/1.8/gems/rack-mount-0.6.13/lib/rack/mount/code_generation.rb:68:in `optimized_each'
/usr/lib/ruby/gems/1.8/gems/rack-mount-0.6.13/lib/rack/mount/code_generation.rb:92:in `recognize'
/usr/lib/ruby/gems/1.8/gems/rack-mount-0.6.13/lib/rack/mount/route_set.rb:139:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/routing/route_set.rb:492:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/head.rb:14:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/methodoverride.rb:24:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/params_parser.rb:21:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/flash.rb:182:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/session/abstract_store.rb:149:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/cookies.rb:287:in `call'
/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.0/lib/active_record/query_cache.rb:32:in `call'
/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.0/lib/active_record/connection_adapters/abstract/query_cache.rb:28:in `cache'
/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.0/lib/active_record/query_cache.rb:12:in `cache'
/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.0/lib/active_record/query_cache.rb:31:in `call'
/usr/lib/ruby/gems/1.8/gems/activerecord-3.0.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:355:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/callbacks.rb:46:in `call'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/callbacks.rb:415:in `_run_call_callbacks'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/callbacks.rb:44:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/sendfile.rb:107:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/remote_ip.rb:48:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/show_exceptions.rb:46:in `call'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/rack/logger.rb:13:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/runtime.rb:17:in `call'
/usr/lib/ruby/gems/1.8/gems/activesupport-3.0.0/lib/active_support/cache/strategy/local_cache.rb:72:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/lock.rb:11:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/lock.rb:11:in `synchronize'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/lock.rb:11:in `call'
/usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/static.rb:30:in `call'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/application.rb:168:in `call'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/application.rb:77:in `send'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/application.rb:77:in `method_missing'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/rack/log_tailer.rb:14:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/content_length.rb:13:in `call'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/handler/webrick.rb:52:in `service'
/usr/lib/ruby/1.8/webrick/httpserver.rb:104:in `service'
/usr/lib/ruby/1.8/webrick/httpserver.rb:65:in `run'
/usr/lib/ruby/1.8/webrick/server.rb:173:in `start_thread'
/usr/lib/ruby/1.8/webrick/server.rb:162:in `start'
/usr/lib/ruby/1.8/webrick/server.rb:162:in `start_thread'
/usr/lib/ruby/1.8/webrick/server.rb:95:in `start'
/usr/lib/ruby/1.8/webrick/server.rb:92:in `each'
/usr/lib/ruby/1.8/webrick/server.rb:92:in `start'
/usr/lib/ruby/1.8/webrick/server.rb:23:in `start'
/usr/lib/ruby/1.8/webrick/server.rb:82:in `start'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/handler/webrick.rb:13:in `run'
/usr/lib/ruby/gems/1.8/gems/rack-1.2.1/lib/rack/server.rb:213:in `start'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/commands/server.rb:65:in `start'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/commands.rb:30
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/commands.rb:27:in `tap'
/usr/lib/ruby/gems/1.8/gems/railties-3.0.0/lib/rails/commands.rb:27
script/rails:6:in `require'
script/rails:6
Rendered home/index.html.erb within layouts/application (1.6ms)
Completed   in 7ms

ActionView::Template::Error (compile error
/home/guest/box/rail/graph/app/views/home/index.html.erb:76: syntax error, unexpected kENSURE, expecting kEND
/home/guest/box/rail/graph/app/views/home/index.html.erb:78: syntax error, unexpected $end, expecting kEND):
    73: </body>
    74: </html>
  app/views/home/index.html.erb:78:in `compile'

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (3.4ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (20.6ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (28.5ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:23:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,238,86", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,376,82", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,305,203", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.9ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 16:23:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:23:42 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",164,42", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",359,59", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",291,214", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:23:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:27:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:28:51 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 10ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:29:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:30:50 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.3ms)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:30:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.3ms)
Completed 200 OK in 10ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:32:06 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.3ms)
Completed 200 OK in 10ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:32:35 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:33:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.3ms)
Completed 200 OK in 10ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:33:32 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.3ms)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:33:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 10ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:33:54 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.4ms)
Completed 200 OK in 10ms (Views: 8.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:35:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.4ms)
Completed 200 OK in 10ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:38:42 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,196,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,263,88", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,366,216", "inject"=>",,", "select"=>",,", "3"=>"0,2,233,261", "reject"=>",,", "4"=>"1,244,263", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.0ms)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 16:38:46 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:38:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,201,47", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,0,2,389,52", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,278,184", "inject"=>",,", "select"=>",,", "3"=>"1,401,54", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:40:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,201,47", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,0,2,389,52", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,278,184", "inject"=>",,", "select"=>",,", "3"=>"1,401,54", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 16:40:37 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:57:35 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>"5,7,1,3,2,0,4,305,178", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>"0,6,1,0,2,5,3,4,234,185", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"7,1,6,7,5,3,4,145,104", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,7,6,2,5,3,4,216,36", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,3,5,6,7,1,295,39", "inject"=>",,", "select"=>",,", "3"=>"2,4,6,5,1,7,0,374,41", "reject"=>",,", "4"=>"3,5,1,6,7,0,431,103", "without"=>",,", "eachSlice"=>",,", "5"=>"4,6,3,2,1,0,7,377,169"}
Rendered home/index.html.erb within layouts/application (5.8ms)
Completed 200 OK in 13ms (Views: 10.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:57:44 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>"7,305,178", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>",234,185", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"7,1,6,7,5,3,4,2,145,104", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,7,6,2,5,3,4,216,36", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,5,6,7,0,295,39", "inject"=>",,", "select"=>",,", "3"=>"4,6,5,7,374,41", "reject"=>",,", "4"=>"5,6,7,431,103", "without"=>",,", "eachSlice"=>",,", "5"=>"6,7,377,169"}
Rendered home/index.html.erb within layouts/application (5.7ms)
Completed 200 OK in 12ms (Views: 10.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:57:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>"7,305,178", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>",234,185", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"7,1,6,7,5,3,4,2,145,104", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,7,6,2,5,3,4,216,36", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,5,6,7,295,39", "inject"=>",,", "select"=>",,", "3"=>"4,6,5,7,374,41", "reject"=>",,", "4"=>"5,6,7,431,103", "without"=>",,", "eachSlice"=>",,", "5"=>"6,7,377,169"}
Rendered home/index.html.erb within layouts/application (4.3ms)
Completed 200 OK in 12ms (Views: 10.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:57:50 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>"7,305,178", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>",234,185", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"7,1,6,7,5,3,4,2,145,104", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,7,6,2,5,3,4,216,36", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,5,6,7,295,39", "inject"=>",,", "select"=>",,", "3"=>"4,6,5,7,374,41", "reject"=>",,", "4"=>"5,6,7,431,103", "without"=>",,", "eachSlice"=>",,", "5"=>"6,7,377,169"}
Rendered home/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 11ms (Views: 8.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:57:51 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>"7,305,178", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>",234,185", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"7,1,6,7,5,3,4,2,145,104", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,7,6,2,5,3,4,216,36", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,5,6,7,295,39", "inject"=>",,", "select"=>",,", "3"=>"4,6,5,7,374,41", "reject"=>",,", "4"=>"5,6,7,431,103", "without"=>",,", "eachSlice"=>",,", "5"=>"6,7,377,169"}
Rendered home/index.html.erb within layouts/application (5.3ms)
Completed 200 OK in 12ms (Views: 9.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:57:51 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>"7,305,178", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>",234,185", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"7,1,6,7,5,3,4,2,145,104", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,7,6,2,5,3,4,216,36", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,5,6,7,295,39", "inject"=>",,", "select"=>",,", "3"=>"4,6,5,7,374,41", "reject"=>",,", "4"=>"5,6,7,431,103", "without"=>",,", "eachSlice"=>",,", "5"=>"6,7,377,169"}
Rendered home/index.html.erb within layouts/application (4.4ms)
Completed 200 OK in 11ms (Views: 8.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 16:57:52 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 11ms (Views: 10.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 16:58:30 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 16:58:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,112,71", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,250,63", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"4,0,1,3,210,137", "inject"=>",,", "select"=>",,", "3"=>"2,61,224", "reject"=>",,", "4"=>"2,311,179", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 16:59:51 +0530 2010

SyntaxError (/home/guest/box/rail/graph/app/controllers/home_controller.rb:77: syntax error, unexpected $end, expecting kEND):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_trace.erb (2.5ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (4.4ms)
Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (13.6ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 17:00:18 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 17:00:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",218,270", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 17:00:41 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 17:00:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,129,143", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,290,111", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,234,201", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 9ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 17:03:37 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 17:03:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,107,105", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,196,107", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,161,199", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 17:05:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,107,105", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,196,107", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",161,199", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 17:05:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,107,105", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,196,107", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",161,199", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 10ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 17:07:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,107,105", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,196,107", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",161,199", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 17:07:43 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 17:07:48 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,194,44", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,281,50", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,216,172", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 17:10:11 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 10ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 17:10:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,3,183,98", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,0,309,96", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,3,248,221", "inject"=>",,", "select"=>",,", "3"=>"1,2,0,340,214", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 9ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 17:33:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,3,183,98", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,309,96", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,248,221", "inject"=>",,", "select"=>",,", "3"=>",340,214", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 17:33:33 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 17:33:50 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 17:33:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,127,103", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,339,76", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,271,206", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (4.4ms)
Completed 200 OK in 10ms (Views: 9.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 19:23:59 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.2ms)
Completed 200 OK in 37ms (Views: 36.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 19:30:47 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,260,94", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,389,101", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,310,217", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 22:14:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (9.1ms)
Completed 200 OK in 36ms (Views: 34.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 22:14:52 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,174,124", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,381,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,353,153", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:35:54 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,174,124", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,381,95", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",353,153", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:35:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:35:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:35:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:35:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:35:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:35:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:35:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:35:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:35:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (46.2ms)
Completed 200 OK in 51ms (Views: 50.7ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:35:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:35:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:35:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:35:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:35:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:35:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:35:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:35:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:36:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,198,124", "1"=>",331,101", "2"=>"0,311,200"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:36:02 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:36:02 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:36:02 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:36:02 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:36:02 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:38:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,198,124", "1"=>",331,101", "2"=>",311,200"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:38:21 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:38:21 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:38:21 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:38:21 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:38:21 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:38:22 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,198,124", "1"=>",331,101", "2"=>",311,200"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:38:22 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:38:22 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:38:22 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:38:22 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:38:22 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:38:22 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:38:22 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:38:22 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:38:23 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,198,124", "1"=>",331,101", "2"=>",311,200"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:38:23 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:38:23 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:38:23 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:38:23 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:38:23 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:38:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,198,124", "1"=>",331,101", "2"=>",311,200"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:38:24 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:38:24 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:38:24 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:38:24 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:38:24 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:38:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,198,124", "1"=>",331,101", "2"=>",311,200"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:38:25 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:38:25 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:38:25 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:38:25 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:38:25 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:38:25 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,198,124", "1"=>",331,101", "2"=>",311,200"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:38:25 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (1.1ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:38:25 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:38:25 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:38:25 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:38:25 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:38:25 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:40:11 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:40:11 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:40:11 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:11 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:11 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:11 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:40:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,1,279,163", "1"=>"0,2,404,123", "2"=>"0,1,357,224"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 64ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:40:18 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (1.0ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:40:18 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:18 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:18 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:18 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:18 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (1.1ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:40:54 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,1,279,163", "1"=>"2,404,123", "2"=>",357,224"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:40:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:40:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:54 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,1,279,163", "1"=>"2,404,123", "2"=>",357,224"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,1,279,163", "1"=>"2,404,123", "2"=>",357,224"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:55 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:56 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:56 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:56 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:40:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,1,279,163", "1"=>"2,404,123", "2"=>",357,224"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:40:56 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:56 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:40:56 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:56 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:56 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:56 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:56 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:56 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,1,279,163", "1"=>"2,404,123", "2"=>",357,224"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,1,279,163", "1"=>"2,404,123", "2"=>",357,224"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (2.0ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,1,279,163", "1"=>"2,404,123", "2"=>",357,224"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:40:57 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:40:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,1,279,163", "1"=>"2,404,123", "2"=>",357,224"}
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/javascripts/prototype.js" for 127.0.0.1 at Sat Sep 25 23:40:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/prototype.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/effects.js" for 127.0.0.1 at Sat Sep 25 23:40:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/effects.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.8ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/rails.js" for 127.0.0.1 at Sat Sep 25 23:40:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/rails.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (54.7ms)


Started GET "/javascripts/dragdrop.js" for 127.0.0.1 at Sat Sep 25 23:40:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/dragdrop.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/javascripts/controls.js" for 127.0.0.1 at Sat Sep 25 23:40:58 +0530 2010

ActionController::RoutingError (No route matches "/javascripts/controls.js"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:42:50 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,1,279,163", "1"=>"2,404,123", "2"=>",357,224"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:43:48 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"0"=>"2,1,279,163", "1"=>"2,404,123", "2"=>",357,224"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:44:13 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:45:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>"1,4,2,3,5,7,412,124", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>"6,179,91", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,3,1,4,5,169,86", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,0,4,4,5,6,319,80", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,3,4,5,6,242,213", "inject"=>",,", "select"=>",,", "3"=>"1,2,0,4,5,6,115,189", "reject"=>",,", "4"=>"1,1,0,2,3,5,6,368,206", "without"=>",,", "eachSlice"=>",,", "5"=>"0,3,1,2,4,6,75,115"}
Rendered home/index.html.erb within layouts/application (3.8ms)
Completed 200 OK in 10ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:45:50 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:46:02 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.6ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:46:22 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:46:48 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:48:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>"4,5,0,1,3,2,8,9,90,137", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>"8,0,1,9,364,107", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "8"=>"7,2,3,5,6,4,9,367,157", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "9"=>"7,8,1,2,3,0,4,5,6,399,133", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,3,2,4,5,6,7,9,201,84", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,3,4,5,6,7,9,310,86", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,1,0,4,5,6,8,9,319,170", "inject"=>",,", "select"=>",,", "3"=>"2,0,1,4,5,6,8,9,213,171", "reject"=>",,", "4"=>"0,1,2,3,5,6,8,9,130,102", "without"=>",,", "eachSlice"=>",,", "5"=>"3,2,1,0,4,6,8,9,137,159"}
Rendered home/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 10ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:48:59 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:49:11 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:51:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>"4,5,2,1,0,3,7,8,9,376,162", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>"8,0,1,4,6,5,2,3,9,126,142", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "8"=>"7,3,2,5,6,4,1,0,9,128,192", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "9"=>"7,8,0,1,3,2,5,6,4,1,1,0,89,172", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,1,2,5,4,6,7,8,9,9,183,123", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,3,5,4,6,7,8,9,9,9,278,122", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,3,0,5,4,6,7,8,9,284,195", "inject"=>",,", "select"=>",,", "3"=>"0,2,1,5,4,6,7,8,9,189,201", "reject"=>",,", "4"=>"5,1,0,3,2,6,7,8,9,333,138", "without"=>",,", "eachSlice"=>",,", "5"=>"2,0,3,1,4,6,7,8,9,336,183"}
Rendered home/index.html.erb within layouts/application (4.4ms)
Completed 200 OK in 11ms (Views: 8.7ms | ActiveRecord: 0.0ms)


Started GET "/coloring" for 127.0.0.1 at Sat Sep 25 23:55:08 +0530 2010

ActionController::RoutingError (No route matches "/coloring"):
  

Rendered /usr/lib/ruby/gems/1.8/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.9ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:55:11 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:55:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,3,212,89", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"4,3,2,367,84", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,4,1,268,200", "inject"=>",,", "select"=>",,", "3"=>"1,0,231,88", "reject"=>",,", "4"=>"1,2,382,83", "without"=>",,", "eachSlice"=>",,", "5"=>",239,96"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:55:40 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:56:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,214,116", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,297,86", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,297,176", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:56:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:56:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",157,76", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,280,90", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,220,159", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:57:03 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:57:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,227,97", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,342,103", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,232,245", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:57:14 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",185,142", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",327,139", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",277,99", "inject"=>",,", "select"=>",,", "3"=>",262,63", "reject"=>",,", "4"=>",205,71", "without"=>",,", "eachSlice"=>",,", "5"=>",269,178"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:57:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",185,142", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",327,139", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"5,277,99", "inject"=>",,", "select"=>",,", "3"=>",262,63", "reject"=>",,", "4"=>",205,71", "without"=>",,", "eachSlice"=>",,", "5"=>"2,269,178"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:57:25 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,185,142", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,327,139", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"5,277,99", "inject"=>",,", "select"=>",,", "3"=>",262,63", "reject"=>",,", "4"=>",205,71", "without"=>",,", "eachSlice"=>",,", "5"=>",269,178"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:57:53 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:57:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,164,117", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,340,119", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,272,246", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sat Sep 25 23:58:37 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sat Sep 25 23:58:41 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,219,99", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,367,96", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,294,243", "inject"=>",,", "select"=>",,", "3"=>"1,262,104", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:00:26 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:00:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,96,78", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,262,66", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,175,185", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:14:43 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:14:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,176,98", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,297,105", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,252,210", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:15:01 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:15:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:15:47 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:30:41 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:30:48 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,260,118", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,332,222", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,367,58", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:31:10 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (4.3ms)
Completed 200 OK in 49ms (Views: 48.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:31:36 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:31:42 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.6ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:31:48 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:31:59 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:32:09 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:32:33 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:32:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",239,85", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",384,89", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",316,193", "inject"=>",,", "select"=>",,", "3"=>",396,198", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:32:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,363,168", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",384,89", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",316,193", "inject"=>",,", "select"=>",,", "3"=>"0,396,198", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:33:02 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:33:28 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:33:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",145,157", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",292,139", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",217,252", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:33:48 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:34:00 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:34:01 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:34:17 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:34:22 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:34:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>",334,182", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>",163,188", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",257,117", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",331,100", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",322,245", "inject"=>",,", "select"=>",,", "3"=>",255,206", "reject"=>",,", "4"=>",311,158", "without"=>",,", "eachSlice"=>",,", "5"=>",217,158"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:35:05 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:35:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",158,147", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",333,130", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",306,273", "inject"=>",,", "select"=>",,", "3"=>",226,243", "reject"=>",,", "4"=>",261,162", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:35:23 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.6ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:35:31 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,216,85", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,296,120", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,240,254", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:36:29 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 48ms (Views: 47.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:36:44 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:37:15 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:37:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",245,82", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",373,105", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",312,147", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:37:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",267,177", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",223,113", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",312,147", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:40:14 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:40:25 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,183,74", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,371,73", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,284,196", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:41:09 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,64,186", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,182,94", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,190,183", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:42:17 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:42:23 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,150,102", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,187,176", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,245,113", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:44:16 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:44:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>"2,227,129", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",177,89", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",315,85", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"6,222,207", "inject"=>",,", "select"=>",,", "3"=>"5,278,188", "reject"=>",,", "4"=>",216,126", "without"=>",,", "eachSlice"=>",,", "5"=>"3,267,97"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:44:32 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "11"=>",212,105", "6"=>",195,206", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "12"=>",221,120", "7"=>",163,187", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "8"=>",134,154", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "9"=>",135,113", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",271,160", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",188,156", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",177,97", "inject"=>",,", "select"=>",,", "3"=>",226,70", "reject"=>",,", "10"=>",165,77", "4"=>",317,72", "without"=>",,", "eachSlice"=>",,", "5"=>",336,150"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:45:10 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:45:16 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,157,130", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",314,76", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,280,160", "inject"=>",,", "select"=>",,", "3"=>"0,2,219,170", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 9ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:45:59 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:46:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,170,85", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,310,90", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,250,187", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 00:58:43 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:58:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,161,158", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,273,75", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,267,155", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:59:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,121,108", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,0,333,108", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,238,85", "inject"=>",,", "select"=>",,", "3"=>"2,1,128,117", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:59:18 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,2,1,168,135", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,0,193,45", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,3,279,127", "inject"=>",,", "select"=>",,", "3"=>"1,0,2,293,63", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:59:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,2,1,168,135", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,193,45", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,279,127", "inject"=>",,", "select"=>",,", "3"=>",293,63", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 00:59:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,2,1,168,135", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,193,45", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,279,127", "inject"=>",,", "select"=>",,", "3"=>",293,63", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:13:32 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,2,1,168,135", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,193,45", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,279,127", "inject"=>",,", "select"=>",,", "3"=>",293,63", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:13:33 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,2,1,168,135", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,193,45", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"3,279,127", "inject"=>",,", "select"=>",,", "3"=>",293,63", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:14:30 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>",372,127", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>",314,129", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",411,169", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",220,167", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",348,231", "inject"=>",,", "select"=>",,", "3"=>",245,233", "reject"=>",,", "4"=>",321,117", "without"=>",,", "eachSlice"=>",,", "5"=>",308,111"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:14:36 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>",341,273", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>",358,274", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "8"=>",362,247", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "9"=>",359,232", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",316,140", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",235,112", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",279,168", "inject"=>",,", "select"=>",,", "3"=>",205,174", "reject"=>",,", "4"=>",176,180", "without"=>",,", "eachSlice"=>",,", "5"=>",163,209"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:15:58 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>",341,273", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "7"=>",358,274", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "8"=>",362,247", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "9"=>",359,232", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",340,175", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",332,198", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",455,176", "inject"=>",,", "select"=>",,", "3"=>",306,158", "reject"=>",,", "4"=>",216,101", "without"=>",,", "eachSlice"=>",,", "5"=>",369,99"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:16:04 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:16:11 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,261,144", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,0,415,120", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",316,50", "inject"=>",,", "select"=>",,", "3"=>"1,336,180", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.5ms)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:16:36 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:16:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,139,120", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,310,73", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,286,191", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 52ms (Views: 51.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:17:16 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:17:39 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:17:47 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,111,76", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,304,114", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,181,212", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:18:14 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:18:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,178,67", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,125,124", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,267,150", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:18:54 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:19:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,241,60", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,169,142", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,288,158", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:20:13 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:20:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,227,29", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,118,122", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,290,137", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:20:49 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:20:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,259,72", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,214,187", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,291,194", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:21:34 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.6ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:21:56 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (4.8ms)
Completed 200 OK in 10ms (Views: 9.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:22:47 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:23:09 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,1,3,206,68", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,3,339,65", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,3,3,241,180", "inject"=>",,", "select"=>",,", "3"=>"0,2,1,2,0,210,80", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:23:24 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,337,165", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,208,152", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,232,74", "inject"=>",,", "select"=>",,", "3"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 9ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:23:35 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:23:43 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,169,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,179,198", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,278,201", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:23:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,248,118", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,180,174", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,320,194", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:24:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,169,75", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,179,198", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",278,201", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:24:06 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",202,132", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",288,57", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",316,193", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:24:16 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,1,287,146", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,5,220,103", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",204,206", "inject"=>",,", "select"=>",,", "3"=>"0,300,225", "reject"=>",,", "4"=>",205,217", "without"=>",,", "eachSlice"=>",,", "5"=>"1,231,105"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:24:24 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:24:55 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:25:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,209,78", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,151,169", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,283,167", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:25:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,2,3,288,178", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,0,299,49", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,4,0,3,235,102", "inject"=>",,", "select"=>",,", "3"=>"1,0,2,339,117", "reject"=>",,", "4"=>"2,245,110", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 9ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:25:45 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"3,2,1,4,4,230,73", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,3,172,135", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,0,3,299,144", "inject"=>",,", "select"=>",,", "3"=>"0,1,2,226,206", "reject"=>",,", "4"=>"0,5,0,241,75", "without"=>",,", "eachSlice"=>",,", "5"=>"4,252,78"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 9ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:26:07 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,291,118", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,238,191", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,364,190", "inject"=>",,", "select"=>",,", "3"=>",,", "reject"=>",,", "4"=>",,", "without"=>",,", "eachSlice"=>",,", "5"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:26:19 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,244,134", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,372,101", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,356,215", "inject"=>",,", "select"=>",,", "3"=>",,", "reject"=>",,", "4"=>",,", "without"=>",,", "eachSlice"=>",,", "5"=>",,"}
Rendered home/index.html.erb within layouts/application (3.4ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:26:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:26:26 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,215,66", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,357,68", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,315,131", "inject"=>",,", "select"=>",,", "3"=>"1,230,73", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:26:32 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,216,146", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,261,81", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,302,135", "inject"=>",,", "select"=>",,", "3"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:26:37 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:26:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:26:40 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:26:46 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,206,82", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,148,179", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,277,212", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:27:29 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:27:34 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",245,63", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",164,164", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",309,167", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 9ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:27:39 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,225,127", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,288,52", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,315,152", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:27:53 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,3,3,201,84", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,3,108,182", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,3,278,195", "inject"=>",,", "select"=>",,", "3"=>"0,0,2,1,298,119", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:27:57 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",280,137", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",203,63", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",170,153", "inject"=>",,", "select"=>",,", "3"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:28:04 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:28:23 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:28:29 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",238,97", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,2,131,224", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"1,308,219", "inject"=>",,", "select"=>",,", "3"=>"1,249,100", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (46.5ms)
Completed 200 OK in 51ms (Views: 50.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:28:46 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:28:49 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",207,55", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",111,211", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",274,222", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:28:56 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,305,190", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"3,252,63", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,160,169", "inject"=>",,", "select"=>",,", "3"=>"1,4,314,197", "reject"=>",,", "4"=>"3,329,198", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:29:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",321,156", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",212,186", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",338,236", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:29:15 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,323,157", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,221,198", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,396,260", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:29:21 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,278,164", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",252,211", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,339,224", "inject"=>",,", "select"=>",,", "3"=>",278,177", "reject"=>",,", "4"=>",332,214", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:29:23 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",373,191", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:29:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:30:04 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,225,99", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,123,255", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,311,267", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:30:08 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",266,148", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",159,233", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",319,240", "inject"=>",,", "select"=>",,", "3"=>",233,224", "reject"=>",,", "4"=>",368,157", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:30:10 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",254,150", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:30:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",327,176", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",189,259", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",324,288", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:30:14 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",298,194", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",341,249", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",324,288", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:30:20 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,349,148", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",257,232", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,355,279", "inject"=>",,", "select"=>",,", "3"=>",267,238", "reject"=>",,", "4"=>",358,160", "without"=>",,", "eachSlice"=>",,", "5"=>",403,301"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:31:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:32:00 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:32:02 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",145,157", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",321,121", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",256,214", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 10ms (Views: 9.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:32:05 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",421,164", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",210,213", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",245,110", "inject"=>",,", "select"=>",,", "3"=>",329,253", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:32:09 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",245,206", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:32:12 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"1,322,202", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,238,209", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:35:20 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:35:34 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:35:44 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:37:53 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.6ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:38:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:39:07 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (4.3ms)
Completed 200 OK in 12ms (Views: 10.3ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:44:55 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:46:12 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:46:42 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:46:52 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 8ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:46:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:46:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:48:12 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.6ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:48:14 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:52:38 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:52:42 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,192,102", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",121,253", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,246,240", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:52:50 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,245,158", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"0,2,402,97", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,359,241", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.3ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:53:00 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,269,162", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",224,226", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,285,255", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:53:19 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:53:25 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:55:31 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:56:16 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:56:32 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:56:53 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:56:57 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:56:58 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.7ms)
Completed 200 OK in 7ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:57:15 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:57:37 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:58:55 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 7ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at Sun Sep 26 01:59:45 +0530 2010
  Processing by HomeController#index as HTML
Rendered home/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:59:52 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,377,152", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",254,194", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,357,247", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:59:55 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",216,122", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",201,195", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.1ms)
Completed 200 OK in 8ms (Views: 7.6ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 01:59:59 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",269,134", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (2.9ms)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 02:00:03 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "6"=>",277,150", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>",268,190", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>",287,119", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>",360,197", "inject"=>",,", "select"=>",,", "3"=>",288,228", "reject"=>",,", "4"=>",212,247", "without"=>",,", "eachSlice"=>",,", "5"=>",223,193"}
Rendered home/index.html.erb within layouts/application (3.3ms)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started POST "/" for 127.0.0.1 at Sun Sep 26 02:00:13 +0530 2010
  Processing by HomeController#index as HTML
  Parameters: {"inspect"=>",,", "size"=>",,", "zip"=>",,", "toArray"=>",,", "sortBy"=>",,", "partition"=>",,", "findAll"=>",,", "any"=>",,", "all"=>",,", "intersect"=>",,", "clear"=>",,", "_each"=>",,", "uniq"=>",,", "pluck"=>",,", "collect"=>",,", "each"=>",,", "last"=>",,", "max"=>",,", "member"=>",,", "grep"=>",,", "_reverse"=>",,", "find"=>",,", "detect"=>",,", "0"=>"2,1,324,224", "flatten"=>",,", "invoke"=>",,", "include"=>",,", "1"=>"2,0,289,268", "clone"=>",,", "compact"=>",,", "first"=>",,", "entries"=>",,", "min"=>",,", "inGroupsOf"=>",,", "2"=>"0,1,350,264", "inject"=>",,", "select"=>",,", "reject"=>",,", "without"=>",,", "eachSlice"=>",,"}
Rendered home/index.html.erb within layouts/application (3.2ms)
Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms)
